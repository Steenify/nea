/* eslint-disable react/jsx-closing-bracket-location */
import React, { useEffect, useState, useRef } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import { WEB_ROUTES, tableColumnWidth, FUNCTION_NAMES } from 'constants/index';
import Checkbox from 'components/common/checkbox';
import { Formik, Form } from 'formik';
import ValidationField from 'components/common/formik/validationField';
import { dateStringFromDate, dateFromString, autoGenerateDownloadLink, byteArrayToBase64 } from 'utils';
import moment from 'moment';
import { getMastercodeAction, MASTER_CODE } from 'store/actions';
import DataTable from 'components/common/data-table';
import CheckForEncryption from 'modules/checkForEncryption';

import { getBulkFindingAction, downloadBulkFindingAction } from './action';

const BulkUpdate = (props) => {
  const {
    getMastercodeAction,
    getBulkFindingAction,
    downloadBulkFindingAction,
    // history,
    // location: { search },
    ui: { isLoading },
    data: { list },
    masterCodes,
  } = props;

  useEffect(() => {
    document.title = 'NEA | Bulk EPI Findings';
    getMastercodeAction([MASTER_CODE.RO_CODE, MASTER_CODE.CDC_CODE, MASTER_CODE.DIVISION_CODE, MASTER_CODE.EPI_DISEASE_TYPE]);
  }, [getMastercodeAction]);

  const [isShowTable, setShowTable] = useState(false);
  const [caseIds, setCaseIds] = useState([]);
  const passwordModalRef = useRef(null);
  // const [isShowModal, setIsShowModal] = useState(false);
  // const [modalData, setModalData] = useState({});
  const isSelectAll = caseIds.length > 0 && caseIds.length === list.length;

  const validate = (values) => {
    const errors = {};
    if (!values.caseType) errors.caseType = 'Required';
    return errors;
  };

  const initialValues = {
    submissionDateFrom: dateStringFromDate(moment().add(-1, 'days')),
    submissionDateTo: dateStringFromDate(moment()),
    regionOffice: '',
    division: '',
    cdc: '',
    clusterId: '',
    caseType: '',
  };
  const onSubmit = (values, { setSubmitting }) => {
    setCaseIds([]);
    getBulkFindingAction(values).then(() => {
      if (!isShowTable) setShowTable(true);
    });
    setSubmitting(false);
  };

  const onCheckSample = (caseId) => {
    setCaseIds(caseIds.includes(caseId) ? caseIds.filter((id) => id !== caseId) : [...caseIds, caseId]);
  };

  const onCheckAllSample = () => {
    setCaseIds(isSelectAll ? [] : list.map((item) => item.caseId));
  };

  const columns = [
    {
      fixed: 'left',
      minWidth: tableColumnWidth.xs,
      Cell: (cellInfo) => <Checkbox checked={caseIds.includes(cellInfo.row.caseId)} onChange={() => onCheckSample(cellInfo.row.caseId)} />,
      Header: () => <Checkbox checked={isSelectAll} onChange={() => onCheckAllSample()} />,
    },
    {
      Header: 'Case ID',
      accessor: 'caseId',
      minWidth: tableColumnWidth.md,
    },
    {
      Header: 'Cluster Locality',
      accessor: 'clusterLocality',
      minWidth: tableColumnWidth.lg,
      Cell: (cellInfo) => (
        <span
          className="text-blue cursor-pointer"
          onClick={(e) => {
            e.stopPropagation();
            // setModalData({ clusterId: cellInfo.row.clusterId, clusterLocality: cellInfo.row.clusterLocality });
            // setIsShowModal(true);
          }}>
          {cellInfo.row.clusterLocality}
        </span>
      ),
    },
    {
      Header: 'Residential Address',
      accessor: 'residentialAddress',
      minWidth: tableColumnWidth.xl,
    },
    {
      Header: 'Onset Date',
      accessor: 'onsetDate',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'Division',
      accessor: 'division',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'Town Council',
      accessor: 'townCouncil',
      minWidth: tableColumnWidth.lg,
    },
  ];

  const onDownload = (password) => {
    downloadBulkFindingAction({ caseIds, password }, (fileData, mineType) => {
      const base64 = byteArrayToBase64(fileData);
      autoGenerateDownloadLink(`Bulk_Download ${caseIds.join('_')}`, mineType, base64);
      setCaseIds([]);
    });
  };

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={WEB_ROUTES.REPORT.BULK_UPDATE_FINDINGS.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.EPI_INVESTIGATION, WEB_ROUTES.REPORT.BULK_UPDATE_FINDINGS]} />
          <div className="paddingBottom50">
            <div className="main-title">
              <h1>{WEB_ROUTES.REPORT.BULK_UPDATE_FINDINGS.name}</h1>
            </div>
            <div className="paddingLeft30">
              <h2>Selection Criteria</h2>
            </div>

            <Formik enableReinitialize initialValues={initialValues} validate={validate} onSubmit={onSubmit}>
              {({ values }) => {
                const { submissionDateFrom, submissionDateTo } = values;
                // const isToDateOut = (day) => day.diff(dateFromString(submissionDateFrom)) < 0 || moment().diff(day) < 0;
                return (
                  <Form>
                    <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
                      <div className="tab-pane__group bg-white">
                        <div className="card">
                          <div className="form-inline mb-4">
                            <div>
                              <b className="text-body">Submission Date From</b>
                              <ValidationField
                                name="submissionDateFrom"
                                placeholder="DD/MM/YYYY"
                                inputComponent="singleDatePickerV2"
                                maxDate={dateFromString(submissionDateTo)}
                                inputClassName="mt-2 mr-2 xs-paddingBottom15"
                              />
                            </div>
                            <div>
                              <b className="text-body">Submission Date To</b>
                              <ValidationField
                                name="submissionDateTo"
                                placeholder="DD/MM/YYYY"
                                inputComponent="singleDatePickerV2"
                                minDate={dateFromString(submissionDateFrom)}
                                maxDate={moment()}
                                inputClassName="mt-2 mr-2"
                              />
                            </div>
                          </div>
                          <div className="form-inline mb-4">
                            <div className="form-group form-group__stacked d-block">
                              <div className="form-group form-group__stacked d-block">
                                <b className="text-body">Disease</b>
                                <ValidationField name="caseType" inputComponent="react-select" selectClassName="d-block wf-400" options={masterCodes[MASTER_CODE.EPI_DISEASE_TYPE] || []} />
                              </div>
                            </div>
                          </div>
                          <div className="form-inline mb-4">
                            <div className="form-group form-group__stacked d-block">
                              <b className="text-body">RO</b>
                              <ValidationField
                                name="regionOffice"
                                inputComponent="react-select"
                                selectClassName="d-block wf-400"
                                options={masterCodes[MASTER_CODE.RO_CODE] || []}
                                placeholder="All"
                                hideError
                              />
                            </div>
                          </div>
                          <div className="form-inline mb-4">
                            <div className="form-group form-group__stacked d-block">
                              <div className="form-group form-group__stacked d-block">
                                <b className="text-body">Division</b>
                                <ValidationField
                                  name="division"
                                  inputComponent="react-select"
                                  selectClassName="d-block wf-400"
                                  options={masterCodes[MASTER_CODE.DIVISION_CODE] || []}
                                  placeholder="All"
                                  hideError
                                />
                              </div>
                            </div>
                          </div>
                          <div className="form-inline mb-4">
                            <div className="form-group form-group__stacked d-block">
                              <div className="form-group form-group__stacked d-block">
                                <b className="text-body">CDC</b>
                                <ValidationField
                                  name="cdc"
                                  inputComponent="react-select"
                                  selectClassName="d-block wf-400"
                                  options={masterCodes[MASTER_CODE.CDC_CODE] || []}
                                  placeholder="All"
                                  hideError
                                />
                              </div>
                            </div>
                          </div>
                          <div className="form-inline mb-4">
                            <div className="wf-400">
                              <b className="text-body">Cluster ID</b>
                              <ValidationField name="clusterId" />
                            </div>
                          </div>
                          <div className="d-flex">
                            <button type="submit" className="btn btn-pri">
                              Search
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Form>
                );
              }}
            </Formik>

            <div className="paddingBottom50 tabsContainer">
              {isShowTable && (
                <div>
                  <DataTable data={list} columns={columns} />
                  {caseIds.length > 0 && (
                    <div className="d-flex align-items-center ml-auto">
                      <button type="button" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal}>
                        Generate Excel
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.downloadBulkEpiFindings} ref={passwordModalRef} onGenerate={onDownload} />
          <InPageLoading isLoading={isLoading} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global, epiInvestigationReducers: { bulkFindings } }, ownProps) => ({
  ...ownProps,
  ...bulkFindings,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = { getMastercodeAction, getBulkFindingAction, downloadBulkFindingAction };

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(BulkUpdate));
