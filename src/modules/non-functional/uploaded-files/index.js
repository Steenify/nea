import React, { useEffect, useState, useRef, useMemo, useCallback } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import { toast } from 'react-toastify';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Sort from 'components/common/sort';
import SearchBox from 'components/common/searchBox';
import DateRangePickerSelect from 'components/common/dateRangPickerSelect';
import FilteringDataTable from 'components/common/filtering-data-table';
import Filter, { FilterType } from 'components/common/filter';
import InPageLoading from 'components/common/inPageLoading';

import FileTemplates from 'modules/non-functional/file-templates';

import { byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';

import { downloadFile, downloadUploadedErrorFilesService, getUploadedFilesService } from 'services/file-operation';

import { tableColumnWidth, WEB_ROUTES } from 'constants/index';

export const defaultFilterValue = {
  searchText: '',
  searchType: 'fileName',
  filterValue: null,
  datePickerValue: null,
  sortValue: {
    id: 'uploaded',
    label: 'Uploaded Date & Time',
    desc: true,
    sortType: 'combineDateTime',
  },
};

const searchData = [
  {
    label: 'File Name',
    value: 'fileName',
  },
];

const dateSelectData = [
  {
    label: 'Uploaded Date',
    value: 'uploaded',
  },
];

const UploadedFiles = () => {
  const [apiState, setAPIState] = useState({ list: [], isLoading: false });
  const [sortValue, setSortValue] = useState(defaultFilterValue.sortValue);
  const [searchType, setSearchTypeValue] = useState(defaultFilterValue.searchType);
  const [searchText, setSearchTextValue] = useState(defaultFilterValue.searchText);
  const [datePickerValue, setDatePickerValue] = useState(defaultFilterValue.datePickerValue);
  const [filterValue, setFilterValue] = useState(defaultFilterValue.filterValue);
  const filterRef = useRef(null);

  const getListing = useCallback(() => {
    actionTryCatchCreator(
      getUploadedFilesService(),
      () => setAPIState((prev) => ({ ...prev, isLoading: true })),
      (data) => {
        setAPIState({ isLoading: false, list: data.fileList || [] });
        if (filterRef && filterRef.current) filterRef.current.onClear();
      },
      () => setAPIState((prev) => ({ ...prev, isLoading: false })),
    );
  }, []);

  useEffect(() => {
    document.title = 'NEA | File Download';
    getListing();
  }, [getListing]);

  const filterData = useMemo(
    () => [
      {
        type: FilterType.SELECT,
        id: 'fileType',
        title: 'File Type',
      },
      {
        type: FilterType.SELECT,
        id: 'fileStatus',
        title: 'File Status',
      },
    ],
    [],
  );

  const downloadNormalFile = async (fileId) => {
    const downloadRequest = downloadFile({ fileId });
    const { status, data } = await downloadRequest.request;
    if (status === 200 && data.status === 'Pass') {
      const base64 = byteArrayToBase64(data.fileData);
      autoGenerateDownloadLink(data.fileName, data.fileType, base64);
    } else {
      toast.error(`Unable to load this file (ID: ${fileId}) : ${data.errorMessage}`);
    }
  };

  const downloadErrorFile = async (fileId) => {
    const downloadRequest = downloadUploadedErrorFilesService({ fileId });
    const { status, data } = await downloadRequest.request;
    if (status === 200 && data.status === 'Pass') {
      const base64 = byteArrayToBase64(data.fileData);
      autoGenerateDownloadLink(data.fileName, data.fileType, base64);
    } else {
      toast.error(`Unable to load this file (ID: ${fileId}) : ${data.errorMessage}`);
    }
  };

  const columns = [
    {
      Header: 'File Name',
      accessor: 'fileName',
      minWidth: tableColumnWidth.xxl,
    },
    {
      Header: 'Submission Type',
      accessor: 'submissionType',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'File Type',
      accessor: 'fileType',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'Uploaded Date',
      accessor: 'uploadedDate',
      minWidth: tableColumnWidth.lg,
      sortHeader: 'Uploaded Date & Time',
      sortAccessor: 'uploaded',
      sortType: 'combineDateTime',
    },
    {
      Header: 'Uploaded Time',
      accessor: 'uploadedTime',
      minWidth: tableColumnWidth.lg,
      hideInSort: true,
    },
    {
      Header: 'File Status',
      accessor: 'fileStatus',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'File',
      accessor: 'downloadFile',
      minWidth: tableColumnWidth.lg,
      Cell: (cellInfo) => (
        <button type="button" className="btn btn-sec" onClick={() => downloadNormalFile(cellInfo.row._original.fileId)}>
          Download
        </button>
      ),
    },
    {
      Header: 'Error File',
      accessor: 'downloadErrorFile',
      minWidth: tableColumnWidth.lg,
      Cell: (cellInfo) => {
        if (cellInfo.row._original.errorFile) {
          return (
            <button type="button" className="btn btn-sec" onClick={() => downloadErrorFile(cellInfo.row._original.fileId)}>
              Download
            </button>
          );
        }
        return <></>;
      },
    },
  ];

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active="File Download" />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.NON_FUNCTIONAL.UPLOADED_FILES]} />
          <div className="main-title">
            <h1>File Download</h1>
            <div className="ml-auto">
              <FileTemplates />
            </div>
          </div>
          <div className="navbar navbar-expand filterMainWrapper">
            <div className="collapse navbar-collapse" id="navbarSupportedContent">
              <SearchBox name="barcode" placeholder="Enter keywords" onChangeText={setSearchTextValue} searchTypes={searchData} value={searchText} onChangeSearchType={setSearchTypeValue} />
              <DateRangePickerSelect
                className="navbar-nav filterWrapper ml-auto xs-paddingBottom15"
                onChange={setDatePickerValue}
                selectData={dateSelectData}
                data={datePickerValue}
                resetValue={defaultFilterValue.datePickerValue}
              />
              <Filter ref={filterRef} className="navbar-nav filterWrapper xs-paddingBottom15" onChange={setFilterValue} data={filterData} original={apiState.list} />
              <Sort className="navbar-nav sortWrapper" data={columns.slice(0, columns.length - 2)} value={sortValue} desc={sortValue.desc} onChange={setSortValue} />
            </div>
          </div>
          <div className="tabsContainer">
            <FilteringDataTable data={apiState.list || []} columns={columns} filterData={{ searchType, searchText, filterValue, sortValue, datePickerValue }} />
          </div>
          <InPageLoading isLoading={apiState.isLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (_reducers, ownProps) => ({
  ...ownProps,
});

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(UploadedFiles));
