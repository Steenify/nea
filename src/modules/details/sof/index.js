import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { TabContent, TabPane } from 'reactstrap';
import { Formik, Form } from 'formik';
import _ from 'lodash';
import { toast } from 'react-toastify';
import { actionTryCatchCreator, autoGenerateDownloadLink, byteArrayToBase64 } from 'utils';

import Header from 'components/ui/header';
import TabNav from 'components/ui/tabnav';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import PromptOnLeave from 'components/common/formik/prompt-on-leave';
import FormikSubmitErrorMessage from 'components/common/formik/submit-error-message';

import { sofDownloadService } from 'services/inspection-management/sof';

import StatementOfficer from './statement-of-officer';
import AdditionalInfo from './additional-info';
import { sofInitialValues, sofValidation } from './helper';
import { getSOFDetailAction, sofSaveAction, sofSubmitAction, resetSOFDetailAction } from './action';

import './style.scss';

const OfficerSof = (props) => {
  const {
    resetSOFDetailAction,
    getSOFDetailAction,
    sofSaveAction,
    sofSubmitAction,
    location: { state },
    history,
    ui: { isLoading },
    data,
  } = props;

  const [activeTab, setActiveTab] = useState('0');
  const [isDetailLoaded, setIsDetailLoaded] = useState(false);
  const [isEditing, setIsEditing] = useState(state?.isEditing);
  const [localLoading, setLocalLoading] = useState(false);

  const id = state?.id;

  useEffect(() => {
    document.title = 'NEA | Statement of Fact';
    if (id) {
      resetSOFDetailAction();
      getSOFDetailAction(id).then(() => {
        setIsDetailLoaded(true);
      });
    } else {
      history.goBack();
    }
  }, [getSOFDetailAction, resetSOFDetailAction, id, history]);

  const onSubmit = (values, actions) => {
    if (values.isSaving) {
      sofSaveAction(values).then(() => {
        actions.resetForm();
        toast.success('Task saved');
        getSOFDetailAction(id);
      });
    } else {
      sofSubmitAction(values).then(() => {
        actions.resetForm();
        history.goBack();
        // getSOFDetailAction(id);
        setIsEditing(false);
      });
    }
    actions.setSubmitting(false);
    actions.setErrors({});
  };

  const downloadSOF = async () => {
    const onPending = () => {
      setLocalLoading(true);
    };
    const onSuccess = (data) => {
      setLocalLoading(false);
      const base64 = byteArrayToBase64(data?.file || []);
      autoGenerateDownloadLink(data?.fileName || `SOF_${id}.pdf`, 'application/pdf', base64);
    };
    const onError = () => {
      setLocalLoading(false);
    };
    await actionTryCatchCreator(sofDownloadService({ inspectionId: id }), onPending, onSuccess, onError);
  };

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active="task" />
        <div className="contentWrapper">
          <NewBreadCrumb />
          {isDetailLoaded && (
            <Formik initialValues={_.merge({}, sofInitialValues, data)} validate={sofValidation} onSubmit={onSubmit} enableReinitialize>
              {({ values, isSubmitting, setFieldValue, submitForm, dirty }) => {
                const isEditable = values.sof?.isEditable || values.additionalInfo?.isEditable;
                return (
                  <Form>
                    <PromptOnLeave dirty={dirty} />
                    <div className="go-back d-flex align-items-center">
                      <span onClick={() => history.goBack()}>Statement of Officer for Inspection ID: {id}</span>
                      <button
                        type="button"
                        className={`btn btn-sec mr-3 ${!(isEditing && isEditable) ? 'd-none' : 'ml-auto'}`}
                        disabled={isSubmitting}
                        onClick={() => {
                          setFieldValue('isSaving', true, false);
                          submitForm();
                        }}>
                        Save as draft
                      </button>
                      {/* <button
                                type="button"
                                className={`btn btn-pri ${false && 'ml-auto'}`}
                                disabled={isSubmitting}
                                onClick={() => {
                                  setFieldValue('isSaving', false, false);
                                  submitForm();
                                }}
                              >
                                Submit
                              </button> */}
                      <button type="button" className={`btn btn-pri ${!(isEditing && isEditable) && 'ml-auto'}`} onClick={downloadSOF}>
                        Download
                      </button>
                    </div>
                    <div className="tabsContainer">
                      <FormikSubmitErrorMessage />
                      <TabNav onToggleTab={setActiveTab} activeTab={activeTab} menu={['Statement of Officer', 'Additional Info']} />
                      <TabContent activeTab={activeTab}>
                        <TabPane tabId="0">
                          <StatementOfficer isEditing={isEditing} />
                        </TabPane>
                        <TabPane tabId="1">
                          <AdditionalInfo isEditing={isEditing} />
                        </TabPane>
                      </TabContent>
                    </div>
                  </Form>
                );
              }}
            </Formik>
          )}
          <InPageLoading isLoading={isLoading || localLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global, detailReducers: { sofReducer } }, ownProps) => ({
  ...ownProps,
  ...sofReducer,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = {
  getSOFDetailAction,
  resetSOFDetailAction,
  sofSubmitAction,
  sofSaveAction,
};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(OfficerSof));
