import React, { useState, useEffect, useRef } from 'react';

import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import { dateStringFromDate, byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';
import moment from 'moment';
import InPageLoading from 'components/common/inPageLoading';
import { getMastercodeAction, MASTER_CODE } from 'store/actions';
import SearchableCheckList from 'components/common/searchable-check-list';
import CheckForEncryption from 'modules/checkForEncryption';

import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';

import { generateReportForLocationsSpeciesHabitatAndDatesService } from 'services/report/sample-identification';

const ReportForLocationsSpeciesHabitatAndDatesService = (props) => {
  const { getMastercodeAction, masterCodes } = props;
  const [startDate, setStartDate] = useState(moment().add(-1, 'days'));
  const [endDate, setEndDate] = useState(moment());
  const [habitatList, setHabitatList] = useState([]);
  const [speciesList, setSpeciesList] = useState([]);
  const [block, setBlock] = useState('');
  const [road, setRoad] = useState('');
  const [postalCode, setPostalCode] = useState('');

  const [isLoading, setLocalLoading] = useState(false);
  const passwordModalRef = useRef(null);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES.name}`;
    getMastercodeAction([MASTER_CODE.HABITAT_CODE, MASTER_CODE.SPECIES_CODE], undefined, true);
  }, [getMastercodeAction]);

  const onSearch = (password) => {
    const reportParameters = [
      { name: 'identificationStartDate', value: dateStringFromDate(startDate) },
      { name: 'identificationEndDate', value: dateStringFromDate(endDate) },
      { name: 'habitatType', values: habitatList.map((item) => item?.value || '') },
      { name: 'species', values: speciesList.map((item) => item?.value || '') },
      { name: 'block', value: block },
      { name: 'road', value: road },
      { name: 'postalCode', value: postalCode },
    ];

    const onPending = () => {
      setLocalLoading(true);
    };
    const onSuccess = (data) => {
      const { extension, mimeType, reportData } = data;
      autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      setLocalLoading(false);
    };
    const onError = (error) => {
      setLocalLoading(false);
    };
    return actionTryCatchCreator(generateReportForLocationsSpeciesHabitatAndDatesService({ reportParameters, password }), onPending, onSuccess, onError);
  };

  const canGenerate = startDate && endDate;

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline mb-4">
                  <div>
                    <b className="text-body mr-3">Identification Start Date (*)</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={startDate}
                      onChangeDate={setStartDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={endDate}
                    />
                  </div>
                  <div>
                    <b className="text-body mr-3">Identification End Date (*)</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={endDate}
                      onChangeDate={setEndDate}
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>

                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked flex-column">
                    <b className="text-body">Block</b>
                    <input className="textfield" onChange={(e) => setBlock(e.target.value)} />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked flex-column">
                    <b className="text-body">Road</b>
                    <input className="textfield" onChange={(e) => setRoad(e.target.value)} />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked flex-column">
                    <b className="text-body">Postal Code</b>
                    <input className="textfield" onChange={(e) => setPostalCode(e.target.value)} />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Habitat" options={masterCodes[MASTER_CODE.HABITAT_CODE]} onChange={(list) => setHabitatList(list)} />
                  </div>
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Species" options={masterCodes[MASTER_CODE.SPECIES_CODE]} onChange={(list) => setSpeciesList(list)} />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal} disabled={!canGenerate}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateReportForLocationsSpeciesHabitatAndDates} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = { getMastercodeAction };

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(ReportForLocationsSpeciesHabitatAndDatesService));
