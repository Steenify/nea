import React, { useState, useEffect, useRef } from 'react';
import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import moment from 'moment';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import MonthYearPicker from 'components/common/monthYearPicker';
import Select from 'components/common/select';
import SearchableCheckList from 'components/common/searchable-check-list';
import CheckForEncryption from 'modules/checkForEncryption';

import { byteArrayToBase64, autoGenerateDownloadLink, firstDayInPreviousMonth, selectOptionsFromStringArray, actionTryCatchCreator } from 'utils';
import { generateSamplesIdentifiedByMonthService } from 'services/report/sample-identification';
import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';
import { getMastercodeAction, MASTER_CODE } from 'store/actions';

const options = selectOptionsFromStringArray(['RO Officer', 'EHI Analyst']);

const SamplesIdentifiedByMonth = (props) => {
  const { getMastercodeAction, masterCodes } = props;
  const [startDate, setStartDate] = useState(firstDayInPreviousMonth(new Date()));
  const [endDate, setEndDate] = useState(new Date());
  const [specimenList, setSpecimenList] = useState([]);
  const [sampleStatus, setSampleStatus] = useState([{ value: 'CV', label: 'Certified - Vector' }]);
  const [isLoading, setIsLoading] = useState(false);
  const passwordModalRef = useRef(null);

  const [identifiedBy, setIdentifiedBy] = useState(options[0]);
  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH.name}`;
    getMastercodeAction([MASTER_CODE.SAMPLE_STATUS_CODE, MASTER_CODE.SPECIMEN_CODE], [MASTER_CODE.SAMPLE_STATUS_CODE, MASTER_CODE.SPECIMEN_CODE], true);
  }, [getMastercodeAction]);

  const onSearch = (password) => {
    const [fromMonth, fromYear] = moment(startDate).format('MMMM/YYYY').split('/');
    const [toMonth, toYear] = moment(endDate).format('MMMM/YYYY').split('/');
    const reportParameters = [
      {
        name: 'sampleIdentifiedFromMonth',
        value: fromMonth || '',
      },
      {
        name: 'sampleIdentifiedToMonth',
        value: toMonth || '',
      },
      {
        name: 'sampleIdentifiedFromYear',
        value: fromYear || '',
      },
      {
        name: 'sampleIdentifiedToYear',
        value: toYear || '',
      },
      {
        name: 'reportType',
        value: identifiedBy.value || '',
      },
      { name: 'Specimen', values: specimenList.map((item) => item?.value || '') },
      { name: 'SampleStatus', values: sampleStatus.map((item) => item?.value || '') },
    ];
    return actionTryCatchCreator(
      generateSamplesIdentifiedByMonthService({ reportParameters, password }),
      () => setIsLoading(true),
      (data) => {
        setIsLoading(false);
        const { extension, mimeType, reportData } = data;
        autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      },
      () => setIsLoading(false),
    );
  };

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline marginBottom30">
                  <div className="paddingRight25 xs-paddingBottom15">
                    <MonthYearPicker
                      label="Sample Identified From (*)"
                      selected={startDate}
                      onChange={setStartDate}
                      dateFormat="MMMM, yyyy"
                      maxDate={endDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years').toDate()}
                    />
                  </div>

                  <div>
                    <MonthYearPicker
                      label="Sample Identified To (*)"
                      selected={endDate}
                      onChange={setEndDate}
                      dateFormat="MMMM, yyyy"
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years').toDate()}
                    />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div>
                    <div className="paddingBottom5">
                      <b className="text-body">Specimen Identified by</b>
                    </div>
                    <Select className="d-inline-block wf-250" options={options} value={identifiedBy} onChange={setIdentifiedBy} />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Sample Status" options={masterCodes[MASTER_CODE.SAMPLE_STATUS_CODE]} onChange={setSampleStatus} data={sampleStatus} />
                  </div>
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Specimen" options={masterCodes[MASTER_CODE.SPECIMEN_CODE]} onChange={setSpecimenList} />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal}>
                Generate
              </button>
            </div>

            <div className="justify-content-center d-flex" />
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateSamplesIdentifiedByMonth} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = { getMastercodeAction };

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(SamplesIdentifiedByMonth));
