import React, { useState, useEffect, useRef } from 'react';
import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import moment from 'moment';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import Select from 'components/common/select';
import SearchableCheckList from 'components/common/searchable-check-list';
import InPageLoading from 'components/common/inPageLoading';
import CheckForEncryption from 'modules/checkForEncryption';

import { dateStringFromDate, byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';
import { getMasterCodeListLOV } from 'services/masterCode';
import { MASTER_CODE, USER_BACK_END_ROLES, WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';
import { getUserRolesLOV } from 'services/administration';
import { generateDailySummaryReportService } from 'services/report/sample-identification';

const DailySummaryOfSamples = () => {
  const [startDate, setStartDate] = useState(moment().add(-1, 'days'));
  const [endDate, setEndDate] = useState(moment());

  const [analyst, setAnalyst] = useState(null);
  const [analystLOV, setAnalystLOV] = useState([]);

  const [inspector, setInspector] = useState(null);
  const [inspectorLOV, setInspectorLOV] = useState([]);

  const [divisionList, setDivisionList] = useState([]);
  const [divisionLOV, setDivisionLOV] = useState([]);

  const [specimenList, setSpecimenList] = useState([]);
  const [specimenLOV, setSpecimenLOV] = useState([]);

  const [isLoading, setIsLoading] = useState(false);
  const passwordModalRef = useRef(null);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES.name}`;

    const masterCodes = [MASTER_CODE.DIVISION_CODE, MASTER_CODE.SPECIMEN_CODE];
    getMasterCodeListLOV(masterCodes, null, true).then((data) => {
      const l = data?.length || 0;
      if (l > 0) {
        const [divisions, specimens] = data;
        setDivisionLOV(divisions.map((item) => ({ ...item, label: item?.codeDesc, value: item?.code })));
        setSpecimenLOV(specimens.map((item) => ({ ...item, label: item?.codeDesc, value: item?.code })));
      }
    });

    const roles = [USER_BACK_END_ROLES.EHI_LAB_ANALYST, USER_BACK_END_ROLES.RO_OFFICER];
    getUserRolesLOV(roles).then((data) => {
      const l = data?.length || 0;
      if (l > 1) {
        const [analysts, inspectors] = data;
        setAnalystLOV(analysts.map((item) => ({ ...item, label: item?.fullName, value: item?.soeId })));
        setInspectorLOV(inspectors.map((item) => ({ ...item, label: item?.fullName, value: item?.soeId })));
      }
    });
  }, []);

  const onSearch = (password) => {
    const reportParameters = [
      { name: 'identificationStartDate', value: dateStringFromDate(startDate) },
      { name: 'identificationEndDate', value: dateStringFromDate(endDate) },
      { name: 'analyst', value: analyst?.value || '' },
      { name: 'surveyor', value: inspector?.value || '' },
      { name: 'specimen', values: specimenList.map((item) => item?.value || '') },
      { name: 'constituency', values: divisionList.map((item) => item?.value || '') },
    ];
    return actionTryCatchCreator(
      generateDailySummaryReportService({ reportParameters, password }),
      () => setIsLoading(true),
      (data) => {
        setIsLoading(false);
        const { extension, mimeType, reportData } = data;
        autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      },
      () => setIsLoading(false),
    );
  };

  const canGenerate = startDate && endDate;

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline marginBottom30">
                  <div>
                    <b className="text-body">Identification Start Date (*)</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={startDate}
                      onChangeDate={setStartDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={endDate}
                    />
                  </div>
                  <div>
                    <b className="text-body">Identification End Date (*)</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={endDate}
                      onChangeDate={setEndDate}
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
                <div className="form-inline marginBottom30">
                  <div>
                    <div className="paddingBottom5">
                      <b className="text-body">Analyst</b>
                    </div>
                    <div style={{ height: '45px', width: '450px' }}>
                      <Select className="d-inline-block wf-250" options={analystLOV} isClearable placeholder="Optional" value={analyst} onChange={setAnalyst} />
                    </div>
                  </div>
                </div>

                <div className="form-inline marginBottom30">
                  <div>
                    <div className="paddingBottom5">
                      <b className="text-body">Inspection Officer</b>
                    </div>
                    <div style={{ height: '45px', width: '450px' }}>
                      <Select className="d-inline-block wf-250" options={inspectorLOV} isClearable placeholder="Optional" value={inspector} onChange={setInspector} />
                    </div>
                  </div>
                </div>
                <div className="form-inline ">
                  <div className="form-group form-group__stacked">
                    <SearchableCheckList title="Specimen" options={specimenLOV} onChange={setSpecimenList} />
                  </div>

                  <div className="form-group form-group__stacked">
                    <SearchableCheckList title="Division" options={divisionLOV} onChange={setDivisionList} />
                  </div>
                </div>
                <div className="justify-content-center d-flex" />
              </div>
            </div>
            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal} disabled={!canGenerate}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateDailySummaryOfSamples} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (_reducer, ownProps) => ({
  ...ownProps,
});

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(DailySummaryOfSamples));
