import React, { useState, useEffect, useRef } from 'react';
import moment from 'moment';

import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import { dateStringFromDate, byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';
import InPageLoading from 'components/common/inPageLoading';
import { getMastercodeAction, MASTER_CODE } from 'store/actions';
import SearchableCheckList from 'components/common/searchable-check-list';
import CheckForEncryption from 'modules/checkForEncryption';

import { generateEPIFindingsService } from 'services/report/epi';
import { cdcListingService } from 'services/epi-investigation/case';
import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';

const EPIFindingsReport = (props) => {
  const { getMastercodeAction, masterCodes } = props;
  const [taskStatus, setTaskStatus] = useState([]);
  const [cdcList, setCDCList] = useState([]);
  const [clusterId, setClusterId] = useState('');
  const [submissionFrom, setSubmissionFrom] = useState(null);
  const [submissionTo, setSubmissionTo] = useState(null);
  const [neaFrom, setNeaFrom] = useState(null);
  const [neaTo, setNeaTo] = useState(null);

  const [isLoading, setLocalLoading] = useState(false);
  const [cdcLOV, setCdcLOV] = useState([]);
  const passwordModalRef = useRef(null);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.EPI_FINDING_REPORT.name}`;
    getMastercodeAction([MASTER_CODE.EPI_STATUS, MASTER_CODE.EPI_CDC_COB], [MASTER_CODE.EPI_STATUS, MASTER_CODE.EPI_CDC_COB], true);
    cdcListingAction();
  }, [getMastercodeAction]);

  const onSearch = (password) => {
    const reportParameters = [
      { name: 'taskStatus', values: taskStatus.map((item) => item?.value || '') },
      { name: 'CDC', values: cdcList.map((item) => item?.value || '') },
      { name: 'clusterId', value: clusterId },
      { name: 'submissionFrom', value: submissionFrom ? dateStringFromDate(submissionFrom) : '' },
      { name: 'submissionTo', value: submissionTo ? dateStringFromDate(submissionTo) : '' },
      { name: 'neaFrom', value: neaFrom ? dateStringFromDate(neaFrom) : '' },
      { name: 'neaTo', value: neaTo ? dateStringFromDate(neaTo) : '' },
    ];

    const onPending = () => {
      setLocalLoading(true);
    };
    const onSuccess = (data) => {
      const { extension, mimeType, reportData } = data;
      autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.EPI_FINDING_REPORT.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      setLocalLoading(false);
    };
    const onError = (error) => {
      setLocalLoading(false);
    };
    return actionTryCatchCreator(generateEPIFindingsService({ reportParameters, password }), onPending, onSuccess, onError);
  };

  const cdcListingAction = () => {
    const onPending = () => {
      setLocalLoading(true);
    };
    const onSuccess = (data) => {
      setCdcLOV(
        data
          ?.sort((a, b) => {
            const aDesc = a?.codeDesc || '';
            const bDesc = b?.codeDesc || '';
            return aDesc <= bDesc ? -1 : 1;
          })
          .map(({ code, codeDesc }) => ({ value: code, label: codeDesc })) || [],
      );
      setLocalLoading(false);
    };
    const onError = (error) => {
      setLocalLoading(false);
    };
    actionTryCatchCreator(cdcListingService(), onPending, onSuccess, onError);
  };

  const isMandatory = taskStatus.length > 0 && cdcList.length > 0;

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.EPI_FINDING_REPORT.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.EPI_FINDING_REPORT]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.EPI_FINDING_REPORT.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Task Status (*)" options={masterCodes[MASTER_CODE.EPI_STATUS]} onChange={setTaskStatus} placeholder="Mandatory" />
                  </div>
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="CDC/COB1 (*)" options={cdcLOV} onChange={setCDCList} placeholder="Mandatory" />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked flex-column">
                    <b className="text-body">Cluster ID</b>
                    <input className="textfield" onChange={(e) => setClusterId(e.target.value)} />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div>
                    <b className="text-body">Submission Date From</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={submissionFrom}
                      onChangeDate={setSubmissionFrom}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={submissionTo}
                    />
                  </div>
                  <div>
                    <b className="text-body">Submission Date To</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={submissionTo}
                      onChangeDate={setSubmissionTo}
                      minDate={submissionFrom || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div>
                    <b className="text-body">NEA Onset Date From</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={neaFrom}
                      onChangeDate={setNeaFrom}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={neaTo}
                    />
                  </div>
                  <div>
                    <b className="text-body">NEA Onset Date To</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={neaTo}
                      onChangeDate={setNeaTo}
                      minDate={neaFrom || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal} disabled={!isMandatory}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateEPIFindings} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = { getMastercodeAction };

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(EPIFindingsReport));
