import React, { useEffect, useState, useRef, useCallback } from 'react';
import { connect } from 'react-redux';
import moment from 'moment-timezone';

import Header from 'components/ui/header';
import NewBreadCrumb from 'components/ui/breadcrumb';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import Select from 'components/common/select';
import InPageLoading from 'components/common/inPageLoading';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import CheckForEncryption from 'modules/checkForEncryption';

import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';

import { getMastercodeAction } from 'store/actions';
import { actionTryCatchCreator, byteArrayToBase64, autoGenerateDownloadLink } from 'utils';
import { companyNamesListingService, generateShowCauseReportService } from 'services/report/rodent-audit';

const format = (date) => moment(date).format('DD/MM/YYYY');
const auditTypes = [
  {
    label: 'Base Contract',
    value: 'Base Contract',
  },
  {
    label: 'Optional Items',
    value: 'Optional Items',
  },
  {
    label: 'Feedback',
    value: 'Feedback',
  },
  {
    label: 'Late Submission',
    value: 'Late Submission',
  },
];

const ShowCauseReport = (props) => {
  // const { masterCodes, getMastercodeAction } = props;

  const [isLoading, setIsLoading] = useState(false);
  const [auditType, setAuditType] = useState(auditTypes[0]);
  const [companyNames, setCompanyNames] = useState([]);
  const [company, setCompany] = useState();
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const passwordModalRef = useRef(null);

  const getCompanyNamesAction = useCallback(() => {
    const onPending = () => setIsLoading(true);
    const onSuccess = (res) => {
      setIsLoading(false);

      const { companyNames = [] } = res;
      const list = [
        {
          label: '-- Select --',
          value: null,
        },
        ...companyNames.map((n) => ({
          label: n,
          value: n,
        })),
      ];

      setCompanyNames(list);

      if (list.length > 0) {
        setCompany(list[0]);
      }
    };
    const onError = () => setIsLoading(false);
    actionTryCatchCreator(companyNamesListingService(), onPending, onSuccess, onError);
  }, []);

  const generateShowCauseReportAction = async (password) => {
    const reportParameters = [
      {
        name: 'taskType',
        value: auditType?.value,
      },
    ];

    if (company) {
      reportParameters.push({
        name: 'companyName',
        value: company?.value || '',
      });
    }

    if (startDate) {
      reportParameters.push({
        name: 'auditDateFrom',
        value: format(startDate),
      });
    }

    if (endDate) {
      reportParameters.push({
        name: 'auditDateTo',
        value: format(endDate),
      });
    }

    const onPending = () => {
      setIsLoading(true);
    };
    const onSuccess = (res) => {
      setIsLoading(false);

      const { extension, mimeType, reportData } = res;

      autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
    };
    const onError = () => {
      setIsLoading(false);
    };

    return actionTryCatchCreator(generateShowCauseReportService({ reportParameters, password }), onPending, onSuccess, onError);
  };

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT.name}`;
  }, []);

  useEffect(() => {
    getCompanyNamesAction();
  }, [getCompanyNamesAction]);

  return (
    <>
      <Header />

      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT.name} />

        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>

          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <b className="text-body">Audit Task Type </b>
                    <Select className="m-1 w-100 d-block" options={auditTypes} value={auditType} onChange={setAuditType} />
                  </div>
                </div>

                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <b className="text-body">Company Name</b>
                    <Select className="m-1 w-100 d-block" options={companyNames} value={company} onChange={setCompany} />
                  </div>
                </div>

                <div className="form-inline mb-4 d-flex align-items-end">
                  <div>
                    <b className="text-body mr-2">Audit date from</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={startDate}
                      onChangeDate={setStartDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={endDate}
                    />
                  </div>
                  <div>
                    <b className="text-body mr-2">Audit date to</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={endDate}
                      onChangeDate={setEndDate}
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.genereateShowCauseReport} ref={passwordModalRef} onGenerate={generateShowCauseReportAction} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (_reducers, ownProps) => ({ ...ownProps });

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(ShowCauseReport);
