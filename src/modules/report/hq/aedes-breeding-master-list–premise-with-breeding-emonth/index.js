import React, { useLayoutEffect, useState, useRef } from 'react';
import { connect } from 'react-redux';
import moment from 'moment-timezone';
import { last } from 'lodash';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';

import MonthYearPicker from 'components/common/monthYearPicker';
import SearchableCheckList from 'components/common/searchable-check-list';
import CheckForEncryption from 'modules/checkForEncryption';

import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';
import { byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';
import { generateAbmListPremiseWithBreedingEMonthService } from 'services/report/hq';
import * as globalActions from 'store/actions';

const HQAedesBreedingMasterListBreedingEMonth = (props) => {
  const { getMastercodeAction, masterCodes } = props;

  const [startDate, setStartDate] = useState(moment().subtract(1, 'month').startOf('month').toDate());
  const [endDate, setEndDate] = useState(moment().toDate());
  const [roList, setROList] = useState([]);
  const [cdcList, setCDCList] = useState([]);
  const [grcList, setGRCList] = useState([]);
  const [divisionList, setDivisionList] = useState([]);
  const [speciesList, setSpeciesList] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const passwordModalRef = useRef(null);

  useLayoutEffect(() => {
    getMastercodeAction(
      [globalActions.MASTER_CODE.RO_CODE, globalActions.MASTER_CODE.CDC_CODE, globalActions.MASTER_CODE.GRC_CODE, globalActions.MASTER_CODE.DIVISION_CODE, globalActions.MASTER_CODE.HQ_REPORT_LOV_SPE],
      undefined,
      true,
    );
  }, [getMastercodeAction]);

  const onSearch = (password) => {
    const from = moment(startDate).format('YYYY_MM');
    const to = moment(endDate).format('YYYY_MM');

    const reportParameters = [
      {
        name: 'eYear_eMonthFrom',
        value: from,
      },
      {
        name: 'eYear_eMonthTo',
        value: to,
      },
      { name: 'RO', values: roList.map((item) => item?.value || '') },
      { name: 'CDC', values: cdcList.map((item) => item?.value || '') },
      { name: 'GRC', values: grcList.map((item) => item?.value || '') },
      { name: 'Division', values: divisionList.map((item) => item?.value || '') },
      { name: 'Species', value: last(speciesList.map((item) => item?.value || '')) || '' },
    ];
    return actionTryCatchCreator(
      generateAbmListPremiseWithBreedingEMonthService({ reportParameters, password }),
      () => setIsLoading(true),
      (data) => {
        setIsLoading(false);
        const { extension, mimeType, reportData } = data;
        autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EMONTH.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      },
      () => setIsLoading(false),
    );
  };

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EMONTH.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EMONTH]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EMONTH.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline marginBottom30">
                  <div className="paddingRight25 xs-paddingBottom15">
                    <MonthYearPicker
                      label="eMonth - eYear From (*)"
                      selected={startDate}
                      onChange={setStartDate}
                      dateFormat="MMMM, yyyy"
                      maxDate={endDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years').toDate()}
                    />
                  </div>
                  <div>
                    <MonthYearPicker
                      label="eMonth - eYear To (*)"
                      selected={endDate}
                      onChange={setEndDate}
                      dateFormat="MMMM, yyyy"
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years').toDate()}
                    />
                  </div>
                </div>

                <div className="form-inline mb-4">
                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="RO" options={masterCodes[globalActions.MASTER_CODE.RO_CODE]} onChange={(list) => setROList(list)} />
                  </div>

                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="CDC" options={masterCodes[globalActions.MASTER_CODE.CDC_CODE]} onChange={(list) => setCDCList(list)} />
                  </div>

                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="GRC" options={masterCodes[globalActions.MASTER_CODE.GRC_CODE]} onChange={(list) => setGRCList(list)} />
                  </div>

                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Division" options={masterCodes[globalActions.MASTER_CODE.DIVISION_CODE]} onChange={(list) => setDivisionList(list)} />
                  </div>

                  <div className="form-group form-group__stacked mb-4">
                    <SearchableCheckList title="Species" singleChoice options={masterCodes[globalActions.MASTER_CODE.HQ_REPORT_LOV_SPE]} onChange={(list) => setSpeciesList(list)} hideOptionAll />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateABMLemonthPremiseWithBreeding} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = {
  getMastercodeAction: globalActions.getMastercodeAction,
};

export default connect(mapStateToProps, mapDispatchToProps)(HQAedesBreedingMasterListBreedingEMonth);
