import React, { useEffect, useState, useRef } from 'react';
import { connect } from 'react-redux';
import { toast } from 'react-toastify';

import Header from 'components/ui/header';
import NewBreadCrumb from 'components/ui/breadcrumb';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import moment from 'moment-timezone';
import CheckForEncryption from 'modules/checkForEncryption';

import { WEB_ROUTES, FUNCTION_NAMES } from 'constants/index';

import { actionTryCatchCreator, byteArrayToBase64, autoGenerateDownloadLink } from 'utils';
import { generateOperationReportService } from 'services/report/ops-area';

const format = (date) => moment(date).format('DD/MM/YYYY');

const OperationReport = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [operationId, setOperationId] = useState('');
  const [startDate, setStartDate] = useState(undefined);
  const [endDate, setEndDate] = useState(undefined);
  const passwordModalRef = useRef(null);

  const generateOperationReportAction = async (password) => {
    const onPending = () => {
      setIsLoading(true);
    };
    const onSuccess = (res) => {
      setIsLoading(false);

      const { extension, mimeType, reportData } = res;

      autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.OPERATION_REPORT.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
    };
    const onError = (e) => {
      setIsLoading(false);

      toast.error(e);
    };

    const params = {
      reportParameters: [
        {
          name: 'OperationID',
          value: operationId,
        },
      ],
      password,
    };
    if (startDate) {
      params.reportParameters.push({
        name: 'DateFrom',
        value: format(startDate),
      });
    }
    if (endDate) {
      params.reportParameters.push({
        name: 'DateTo',
        value: format(endDate),
      });
    }

    return actionTryCatchCreator(generateOperationReportService(params), onPending, onSuccess, onError);
  };

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.OPERATION_REPORT.name}`;
  }, []);

  const isMandatory = operationId;

  return (
    <>
      <Header />

      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.OPERATION_REPORT.name} />

        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.OPERATION_REPORT]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.OPERATION_REPORT.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>

          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="form-inline mb-2">
                  <div className="mb-4">
                    <b className="text-body">Operation ID (*)</b>
                    <div>
                      <input className="textfield mt-2" value={operationId} onChange={(e) => setOperationId(e.target.value)} />
                    </div>
                  </div>
                </div>

                <div className="form-inline mb-4">
                  <div className="mr-2">
                    <b className="text-body mr-2">Date From</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={startDate}
                      onChangeDate={setStartDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={endDate}
                    />
                  </div>
                  <div className="mr-2">
                    <b className="text-body">Date To</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={endDate}
                      onChangeDate={setEndDate}
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" disabled={!isMandatory} onClick={passwordModalRef?.current?.showPasswordModal}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateOperationReport} ref={passwordModalRef} onGenerate={generateOperationReportAction} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (_reducers, ownProps) => ({ ...ownProps });

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(OperationReport);
