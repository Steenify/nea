import React, { useEffect, useState, useRef } from 'react';
import { connect } from 'react-redux';
// import { toast } from 'react-toastify';
import moment from 'moment';

import Header from 'components/ui/header';
import NewBreadCrumb from 'components/ui/breadcrumb';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import SingleDatePickerV2 from 'components/common/single-date-picker';
import GoBackButton from 'components/ui/go-back-button';
import SearchableCheckList from 'components/common/searchable-check-list';
import Checkbox from 'components/common/checkbox';
import CheckForEncryption from 'modules/checkForEncryption';

import { WEB_ROUTES, tableColumnWidth, FUNCTION_NAMES } from 'constants/index';

import { getMastercodeAction, MASTER_CODE } from 'store/actions';
import { actionTryCatchCreator, exportExcel, dateStringFromDate, autoGenerateDownloadLinkWithBlob } from 'utils';
import { queryAdhocReportService } from 'services/report/adhoc-report';

const AdhocReportQuery = (props) => {
  const {
    masterCodes,
    getMastercodeAction,
    location: { state },
    history,
  } = props;

  const { form3Headers, inspectionHeaders } = state || {};
  const [isLoading, setIsLoading] = useState(false);

  // * Inspection / Breeding
  const [inspectionDateFrom, setInspectionDateFrom] = useState(moment().add(-1, 'days'));
  const [inspectionDateTo, setInspectionDateTo] = useState(moment());
  const [inspectionROList, setInspectionROList] = useState([]);
  const [inspectionCDCList, setInspectionCDCList] = useState([]);
  const [inspectionGRCList, setInspectionGRCList] = useState([]);
  const [inspectionDivisionList, setInspectionDivisionList] = useState([]);
  const [inspectionPremisesList, setInspectionPremisesList] = useState([]);
  const [inspectionBreeding, setInspectionBreeding] = useState();

  // * Form 3
  const [form3DateFrom, setForm3DateFrom] = useState(moment().add(-1, 'days'));
  const [form3DateTo, setForm3DateTo] = useState(moment());
  const [form3ROList, setForm3ROList] = useState([]);
  const [form3TCFormType, setForm3TCFormType] = useState(false);

  const passwordModalRef = useRef(null);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.ADHOC_REPORT_QUERY.name}`;
    if (!form3Headers && !inspectionHeaders) {
      history.goBack();
      return;
    }
    getMastercodeAction([MASTER_CODE.RO_CODE, MASTER_CODE.CDC_CODE, MASTER_CODE.GRC_CODE, MASTER_CODE.DIVISION_CODE, MASTER_CODE.PREMISES_TYPE], undefined, true);
  }, [inspectionHeaders, form3Headers, history, getMastercodeAction]);

  const onGenerate = async (password) => {
    const tables = [];
    let filters = [];

    if (inspectionHeaders && inspectionHeaders.length > 0) {
      tables.push({ moduleName: 'Inspection', columnNames: inspectionHeaders.map((item) => item.value) });
      filters = filters.concat([
        {
          name: 'inspectionDateFrom',
          value: dateStringFromDate(inspectionDateFrom),
        },
        {
          name: 'inspectionDateTo',
          value: dateStringFromDate(inspectionDateTo),
        },
        {
          name: 'inspectionRO',
          values: inspectionROList.map((item) => item.value),
        },
        {
          name: 'inspectionGRC',
          values: inspectionGRCList.map((item) => item.value),
        },
        {
          name: 'inspectionCDC',
          values: inspectionCDCList.map((item) => item.value),
        },
        {
          name: 'inspectionDivision',
          values: inspectionDivisionList.map((item) => item.value),
        },
      ]);
      if (inspectionPremisesList.length > 0) {
        filters.push({
          name: 'inspectionPremiseType',
          values: inspectionPremisesList.map((item) => item.value),
        });
      }
      if (inspectionBreeding !== undefined) {
        filters.push({
          name: 'inspectionBreeding',
          value: inspectionBreeding ? 'Yes' : 'No',
        });
      }
    }
    if (form3Headers && form3Headers.length > 0) {
      tables.push({ moduleName: 'Form3', columnNames: form3Headers.map((item) => item.value) });
      filters = filters.concat([
        {
          name: 'form3CreatedDateFrom',
          value: dateStringFromDate(form3DateFrom),
        },
        {
          name: 'form3CreatedDateTo',
          value: dateStringFromDate(form3DateTo),
        },
        {
          name: 'form3RO',
          values: form3ROList.map((item) => item.value),
        },
      ]);
      if (form3TCFormType) {
        filters.push({
          name: 'form3TCFormType',
          value: form3TCFormType ? 'Yes' : 'No',
        });
      }
    }

    const params = {
      tables,
      filters,
      password,
    };

    const onPending = () => setIsLoading(true);
    const onSuccess = async (result) => {
      setIsLoading(false);
      const { headerInfo, queryResultList } = result;
      const columns = (headerInfo?.columnInfo || []).map((item) => ({ Header: item.columnName, accessor: `header_${item.columnNo}`, minWidth: tableColumnWidth.md }));
      const data = [];
      queryResultList.forEach((item) => {
        const object = {};
        (item?.line || []).forEach((line) => {
          object[`header_${line.columnNo}`] = line.columnValue;
        });
        data.push(object);
      });
      if (data.length === 0) {
        const blob = await fetch(require('./Adhoc Report.xlsx')).then((r) => r.blob());
        autoGenerateDownloadLinkWithBlob('Adhoc Report.xlsx', blob);
      } else {
        exportExcel(data, WEB_ROUTES.REPORT.ADHOC_REPORT_SELECT_HEADER.name, columns);
      }
    };
    const onError = () => setIsLoading(false);

    return actionTryCatchCreator(queryAdhocReportService(params), onPending, onSuccess, onError);
  };

  let isEnabled = true;
  if (inspectionHeaders && inspectionHeaders.length > 0) {
    isEnabled = isEnabled && inspectionDateFrom && inspectionDateTo && inspectionROList.length > 0 && inspectionCDCList.length > 0 && inspectionGRCList.length > 0 && inspectionDivisionList.length > 0;
  }
  if (form3Headers && form3Headers.length > 0) {
    isEnabled = isEnabled && form3DateFrom && form3DateTo && form3ROList.length > 0;
  }

  return (
    <>
      <Header />

      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.ADHOC_REPORT_SELECT_HEADER.name} />

        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.ADHOC_REPORT_SELECT_HEADER]} />
          <GoBackButton onClick={() => history.goBack()} title="Select Filter Criteria and Generate Report" />

          <div className="filterMainWrapper tabsContainer">
            <div className="row">
              {inspectionHeaders && inspectionHeaders.length > 0 && (
                <div className="col-lg-8">
                  <h2 className="font-weight-bold">Inspection and Breeding filter</h2>
                  <div className="tab-pane__group bg-white">
                    <div className="card">
                      <div className="form-inline mb-4 d-flex align-items-end">
                        <div>
                          <b className="text-body mr-3">Inspection Date From (*)</b>
                          <SingleDatePickerV2
                            className="mt-2 mr-2 xs-paddingBottom15"
                            date={inspectionDateFrom}
                            onChangeDate={setInspectionDateFrom}
                            minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                            maxDate={inspectionDateTo}
                          />
                        </div>
                        <div>
                          <b className="text-body mr-3">Inspection Date To (*)</b>
                          <SingleDatePickerV2
                            className="mt-2 mr-2 xs-paddingBottom15"
                            date={inspectionDateTo}
                            onChangeDate={setInspectionDateTo}
                            minDate={inspectionDateFrom || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                          />
                        </div>
                      </div>

                      <div className="form-inline mb-4">
                        <div className="form-group form-group__stacked mb-4">
                          <SearchableCheckList placeholder="Required" title="RO (*)" options={masterCodes[MASTER_CODE.RO_CODE]} onChange={(list) => setInspectionROList(list)} />
                        </div>
                        <div className="form-group form-group__stacked mb-4">
                          <SearchableCheckList placeholder="Required" title="CDC (*)" options={masterCodes[MASTER_CODE.CDC_CODE]} onChange={(list) => setInspectionCDCList(list)} />
                        </div>
                        <div className="form-group form-group__stacked mb-4">
                          <SearchableCheckList placeholder="Required" title="GRC (*)" options={masterCodes[MASTER_CODE.GRC_CODE]} onChange={(list) => setInspectionGRCList(list)} />
                        </div>
                        <div className="form-group form-group__stacked mb-4">
                          <SearchableCheckList placeholder="Required" title="Division (*)" options={masterCodes[MASTER_CODE.DIVISION_CODE]} onChange={(list) => setInspectionDivisionList(list)} />
                        </div>
                      </div>

                      <div className="form-inline mb-4">
                        <div>
                          <b className="text-body">Breeding</b>
                          <div className="custom-radio mt-2 mr-2">
                            <input type="radio" id="breeding_yes" name="breeding" className="form-input" checked={inspectionBreeding} onClick={() => setInspectionBreeding(true)} />
                            <label className="form-label" htmlFor="breeding_yes">
                              Yes
                            </label>
                          </div>
                          <div className="custom-radio mt-2 mr-2">
                            <input type="radio" id="breeding_no" name="breeding" className="form-input" checked={inspectionBreeding === false} onClick={() => setInspectionBreeding(false)} />
                            <label className="form-label" htmlFor="breeding_no">
                              No
                            </label>
                          </div>
                        </div>
                      </div>
                      <div className="form-inline">
                        <div className="form-group form-group__stacked">
                          <SearchableCheckList title="Premises Type" options={masterCodes[MASTER_CODE.PREMISES_TYPE]} onChange={(list) => setInspectionPremisesList(list)} />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              {/* {inspectionHeaders && inspectionHeaders.length > 0 && form3Headers && form3Headers.length > 0 && <div className="col-lg-1" />} */}
              {form3Headers && form3Headers.length > 0 && (
                <div className="col-lg-4">
                  <h2 className="font-weight-bold">Form 3 filter</h2>
                  <div className="tab-pane__group bg-white">
                    <div className="card">
                      <div className="form-inline mb-4 d-flex align-items-end">
                        <div className="">
                          <b className="text-body mr-3">Form 3 Created Date From (*)</b>
                          <SingleDatePickerV2
                            className="mt-2 mr-2 xs-paddingBottom15"
                            date={form3DateFrom}
                            onChangeDate={setForm3DateFrom}
                            minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                            maxDate={form3DateTo}
                          />
                        </div>
                        <div>
                          <b className="text-body mr-3">Form 3 Created Date To (*)</b>
                          <SingleDatePickerV2
                            className="mt-2 mr-2 xs-paddingBottom15"
                            date={form3DateTo}
                            onChangeDate={setForm3DateTo}
                            minDate={form3DateFrom || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                          />
                        </div>
                      </div>
                      <div className="form-inline mb-4">
                        <div className="form-group form-group__stacked mb-4">
                          <SearchableCheckList placeholder="Required" title="RO (*)" options={masterCodes[MASTER_CODE.RO_CODE]} onChange={(list) => setForm3ROList(list)} />
                        </div>
                      </div>
                      <div className="form-inline">
                        <div className="form-group form-group__stacked">
                          TC Form Type <Checkbox checked={form3TCFormType} onChange={() => setForm3TCFormType(!form3TCFormType)} />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="d-flex mb-4">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal} disabled={!isEnabled}>
                Generate Excel Report
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.queryAdhocReport} ref={passwordModalRef} onGenerate={onGenerate} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (
  {
    global: {
      data: { masterCodes },
    },
  },
  ownProps,
) => ({ ...ownProps, masterCodes });

const mapDispatchToProps = {
  getMastercodeAction,
};

export default connect(mapStateToProps, mapDispatchToProps)(AdhocReportQuery);
