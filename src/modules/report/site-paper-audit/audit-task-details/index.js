import React, { useState, useEffect, useRef } from 'react';
import moment from 'moment';
import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import { byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator, dateStringFromDate } from 'utils';
import InPageLoading from 'components/common/inPageLoading';
import Select from 'components/common/select';
import Checkbox from 'components/common/checkbox';
import { generateAuditTaskDetailsService } from 'services/report/site-paper-audit';
import { WEB_ROUTES, weekNumberLOVs, yearNumberLOVs, FUNCTION_NAMES } from 'constants/index';
import CheckForEncryption from 'modules/checkForEncryption';
import SingleDatePickerV2 from 'components/common/single-date-picker';

const AuditTaskDetails = () => {
  const thisYear = yearNumberLOVs[yearNumberLOVs.length - 1];

  const [eweekFrom, setEweekFrom] = useState(weekNumberLOVs[0]);
  const [eyearFrom, setEyearFrom] = useState(thisYear);
  const [eweekTo, setEweekTo] = useState(weekNumberLOVs[weekNumberLOVs.length - 1]);
  const [eyearTo, setEyearTo] = useState(thisYear);
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [auditType, setAuditType] = useState({ label: 'Site', value: 'SITE' });
  const [sentToiFOS, setSentToiFOS] = useState(false);
  const [receivedFromiFOS, setReceivedFromiFOS] = useState(false);
  const [auditCompleted, setAuditCompleted] = useState();
  const [lapsesObserved, setLapsesObserved] = useState(true);
  const [showCause, setShowCause] = useState(true);
  const [acceptContractorsExplanations, setAcceptContractorsExplanations] = useState(false);
  const [expiredTasks, setExpiredTasks] = useState(false);
  const [showCauseEnabled, setShowCauseEnabled] = useState(false);

  const [isLoading, setLocalLoading] = useState(false);
  const passwordModalRef = useRef(null);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS.name}`;
  }, []);

  const onSearch = (password) => {
    const startDateParam = startDate ? [{ name: 'maintenanceDateFrom', value: dateStringFromDate(startDate) }] : [];
    const endDateParam = endDate ? [{ name: 'maintenanceDateTo', value: dateStringFromDate(endDate) }] : [];
    const reportParameters = [
      { name: 'eYearFrom', value: `${eyearFrom.value}` },
      { name: 'eYearTo', value: `${eyearTo.value}` },
      { name: 'eWeekFrom', value: `${eweekFrom.value}` },
      { name: 'eWeekTo', value: `${eweekTo.value}` },
      { name: 'auditType', value: auditType.value },
      { name: 'sentToiFOS', value: sentToiFOS ? 1 : 0 },
      { name: 'receivedFromiFOS', value: receivedFromiFOS ? 1 : 0 },
      { name: 'auditCompleted', value: auditCompleted ? 1 : 0 },
      { name: 'lapsesObserved', value: showCauseEnabled && lapsesObserved ? 1 : 0 },
      { name: 'showCause', value: showCauseEnabled && showCause ? 1 : 0 },
      { name: 'acceptContractorsExplanations', value: showCauseEnabled && acceptContractorsExplanations ? 1 : 0 },
      { name: 'expiredTasks', value: expiredTasks ? 1 : 0 },
      { name: 'showCauseEnabled', value: showCauseEnabled ? 1 : 0 },
      ...startDateParam,
      ...endDateParam,
    ];

    const onPending = () => {
      setLocalLoading(true);
    };
    const onSuccess = (data) => {
      const { extension, mimeType, reportData } = data;
      autoGenerateDownloadLink(`${WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS.name}.${extension}`, mimeType, byteArrayToBase64(reportData));
      setLocalLoading(false);
    };
    const onError = () => {
      setLocalLoading(false);
    };
    return actionTryCatchCreator(generateAuditTaskDetailsService({ reportParameters, password }), onPending, onSuccess, onError);
  };

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.REPORT, WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS.name}</h1>
          </div>
          <div className="paddingLeft30">
            <h2>Selection Criteria</h2>
          </div>
          <div className="block-summary filterMainWrapper tabsContainer" style={{ padding: '30px' }}>
            <div className="tab-pane__group bg-white">
              <div className="card">
                <div className="d-flex align-items-center mb-4 rptDetailsCont">
                  <b className="text-body wf-200">EWeek - EYear From (*)</b>
                  <Select className="m-1 wf-150" options={weekNumberLOVs} value={eweekFrom} onChange={setEweekFrom} />
                  <Select className="m-1 wf-150" options={yearNumberLOVs} value={eyearFrom} onChange={setEyearFrom} />
                </div>
                <div className="d-flex align-items-center mb-4 rptDetailsCont">
                  <b className="text-body wf-200">EWeek - EYear To (*)</b>
                  <Select className="m-1 wf-150" options={weekNumberLOVs} value={eweekTo} onChange={setEweekTo} />
                  <Select className="m-1 wf-150" options={yearNumberLOVs} value={eyearTo} onChange={setEyearTo} />
                </div>
                <div className="form-inline mb-4">
                  <div>
                    <b className="text-body mr-2">Maintenance Date From</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={startDate}
                      onChangeDate={setStartDate}
                      minDate={moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                      maxDate={endDate}
                    />
                  </div>
                  <div>
                    <b className="text-body">Maintenance Date To</b>
                    <SingleDatePickerV2
                      className="mt-2 mr-2 xs-paddingBottom15"
                      date={endDate}
                      onChangeDate={setEndDate}
                      minDate={startDate || moment().add(-process.env.REACT_APP_REPORT_PAST_YEAR, 'years')}
                    />
                  </div>
                </div>
                <div className="d-flex align-items-center mb-4 rptDetailsCont">
                  <b className="text-body wf-200">Audit Type</b>
                  <Select
                    className="m-1 wf-150"
                    options={[
                      { label: 'Site', value: 'SITE' },
                      { label: 'Paper', value: 'PAPER' },
                      { label: 'EHI', value: 'EHI' },
                    ]}
                    value={auditType}
                    onChange={setAuditType}
                  />
                </div>
                <div className="form-inline mb-4">
                  <div>
                    <b className="text-body mb-2">Audit task status</b>
                    <div className="mt-2 pl-4" style={{ marginLeft: '-5px' }}>
                      <Checkbox className="mb-1" checked={sentToiFOS} onChange={(e) => setSentToiFOS(e.target.checked)} label="Outstanding tasks" />
                      <Checkbox className="mb-1" checked={receivedFromiFOS} onChange={(e) => setReceivedFromiFOS(e.target.checked)} label="Completed tasks" />
                      <Checkbox className="mb-1" checked={expiredTasks} onChange={(e) => setExpiredTasks(e.target.checked)} label="Expired tasks" />
                      {/* <Checkbox className="mb-1" checked={lapsesObserved} onChange={(e) => setLapsesObserved(e.target.checked)} label="Lapses Observed" />
                      <Checkbox className="mb-1" checked={showCause} onChange={(e) => setShowCause(e.target.checked)} label="Show Cause" />
                      <Checkbox
                        className="mb-1"
                        checked={acceptContractorsExplanations}
                        onChange={(e) => setAcceptContractorsExplanations(e.target.checked)}
                        label="Accept Contractorâ€™s Explanations"
                      /> */}
                    </div>
                  </div>
                </div>
                <div className="form-inline mb-4">
                  <div className="flex-fill">
                    {/* <b className="text-body mb-2">Show cause status</b> */}
                    <div style={{ marginLeft: '-5px' }}>
                      <Checkbox
                        className="mb-1"
                        checked={showCauseEnabled}
                        labelClassName="text-body font-weight-bolder"
                        onChange={(e) => setShowCauseEnabled(e.target.checked)}
                        label="Show cause status"
                      />
                    </div>
                    {showCauseEnabled && (
                      <>
                        <div className="mt-2 pl-4">
                          <div className="row align-items-center">
                            <label className="col-lg-4 col-md-6 col-sm-6">Lapses Observed?</label>
                            <div className="custom-radio mt-2 mr-4">
                              <input type="radio" id="lapsesObserved-yes" name="lapsesObserved" className="form-input" checked={lapsesObserved} onClick={() => setLapsesObserved(true)} />
                              <label className="form-label" htmlFor="lapsesObserved-yes">
                                Yes
                              </label>
                            </div>
                            <div className="custom-radio mt-2 mr-2">
                              <input type="radio" id="lapsesObserved-no" name="lapsesObserved" className="form-input" checked={!lapsesObserved} onClick={() => setLapsesObserved(false)} />
                              <label className="form-label" htmlFor="lapsesObserved-no">
                                No
                              </label>
                            </div>
                          </div>
                        </div>
                        <div className="mt-2 pl-4">
                          <div className="row align-items-center">
                            <label className="text-body col-lg-4 col-md-6 col-sm-6">Show Cause?</label>
                            <div className="custom-radio mt-2 mr-4">
                              <input type="radio" id="showCause-yes" name="showCause" className="form-input" checked={showCause} onClick={() => setShowCause(true)} />
                              <label className="form-label" htmlFor="showCause-yes">
                                Yes
                              </label>
                            </div>
                            <div className="custom-radio mt-2 mr-2">
                              <input type="radio" id="showCause-no" name="showCause" className="form-input" checked={!showCause} onClick={() => setShowCause(false)} />
                              <label className="form-label" htmlFor="showCause-no">
                                No
                              </label>
                            </div>
                          </div>
                        </div>
                        <div className="mt-2 pl-4">
                          <div className="row align-items-center">
                            <label className="text-body col-lg-4 col-md-6 col-sm-6">Accept Contractorâ€™s Explanations?</label>
                            <div className="custom-radio mt-2 mr-4">
                              <input
                                type="radio"
                                id="acceptContractorsExplanations-yes"
                                name="acceptContractorsExplanations"
                                className="form-input"
                                checked={acceptContractorsExplanations}
                                onClick={() => setAcceptContractorsExplanations(true)}
                              />
                              <label className="form-label" htmlFor="acceptContractorsExplanations-yes">
                                Yes
                              </label>
                            </div>
                            <div className="custom-radio mt-2 mr-2">
                              <input
                                type="radio"
                                id="acceptContractorsExplanations-no"
                                name="acceptContractorsExplanations"
                                className="form-input"
                                checked={!acceptContractorsExplanations}
                                onClick={() => setAcceptContractorsExplanations(false)}
                              />
                              <label className="form-label" htmlFor="acceptContractorsExplanations-no">
                                No
                              </label>
                            </div>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex">
              <button type="submit" className="btn btn-pri" onClick={passwordModalRef?.current?.showPasswordModal}>
                Generate
              </button>
            </div>
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
          <CheckForEncryption functionName={FUNCTION_NAMES.generateAuditTaskDetails} ref={passwordModalRef} onGenerate={onSearch} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(AuditTaskDetails));
