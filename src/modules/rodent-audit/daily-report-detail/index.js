import React, { useState, useEffect, useCallback } from 'react';
import uuidv4 from 'uuid/v4';
import { withRouter } from 'react-router-dom';
import { toast } from 'react-toastify';

import TabNav from 'components/ui/tabnav';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';

import { getDailyReportDetailService } from 'services/rodent-audit';

import { WEB_ROUTES, tableColumnWidth } from 'constants/index';

import { byteArrayToBase64, autoGenerateDownloadLink, actionTryCatchCreator } from 'utils';

import { downloadFile } from 'services/file-operation';

import FilterTab from './filterTab';

const previousTab = '0';

const DailyReportDetail = (props) => {
  const {
    history,
    location: { state },
  } = props;

  const [tabNavMenu, setTabNavMenu] = useState([]);
  const [activeTabNav, toggleTabNav] = useState(previousTab);
  const [isLoading, setIsLoading] = useState(false);
  const [detail, setDetail] = useState();

  const setData = (data) => {
    const reportDetails = data?.reportDetails || [];
    const menus = [
      {
        title: 'Town Council',
        component: <FilterTab data={reportDetails.filter((item) => item.reportType === 'TC')} reportType="TC" />,
      },
      {
        title: 'Non Town Council',
        component: <FilterTab data={reportDetails.filter((item) => item.reportType === 'NTC')} reportType="NTC" />,
      },
      {
        title: 'Vacant Land',
        component: <FilterTab data={reportDetails.filter((item) => item.reportType === 'Vacant')} reportType="Vacant" />,
      },
      {
        title: 'CRC',
        component: (
          <FilterTab
            data={reportDetails.filter((item) => item.reportType === 'CRC')}
            reportType="CRC"
            specialColumns={[
              {
                Header: 'Address',
                accessor: 'address',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Postal Code',
                accessor: 'postalCode',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Signs of Rodent Infestation',
                accessor: 'signsOfRodentInfestation',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'CRC Defects',
                accessor: 'crcDefects',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Poor Practices',
                accessor: 'poorPractices',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Compactor Management',
                accessor: 'compactorManagement',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Poor Refuse Management',
                accessor: 'poorRefuseManagement',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Conditions of CRC Score',
                accessor: 'conditionsOfCRCScore',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Overall Fault Score',
                accessor: 'overallFaultScore',
                minWidth: tableColumnWidth.md,
              },
            ]}
          />
        ),
      },
      {
        title: 'Bin Chute',
        component: (
          <FilterTab
            data={reportDetails.filter((item) => item.reportType === 'Bin Chute')}
            reportType="Bin Chute"
            specialColumns={[
              {
                Header: 'Block Address',
                accessor: 'address',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Bin Chute Number',
                accessor: 'overviewTab.binChuteNo',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Postal Code',
                accessor: 'postalCode',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'No. of Bin Chute in this block with findings',
                accessor: 'overviewTab.noOfBinChuteWFindings',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Town Council',
                accessor: 'townCouncil',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Signs of Rodent Infestation',
                accessor: 'signsOfRodentInfestation',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Collection Bin',
                accessor: 'collectionBin',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Infrastructure Defects',
                accessor: 'infrastructureDefects',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Poor Refuse Management',
                accessor: 'poorRefuseManagement',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Sanitation',
                accessor: 'sanitation',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'CRC Score',
                accessor: 'conditionsOfCRCScore',
                minWidth: tableColumnWidth.md,
              },
              // {
              //   Header: 'CRC Score (Less Signs of Rodent Infestation)',
              //   accessor: 'conditionsOfCRCScore',
              //   minWidth: tableColumnWidth.md,
              // },
              {
                Header: 'Overall Fault Score',
                accessor: 'overallFaultScore',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Overall Fault Score  (Less Signs of Rodent Infestation)',
                accessor: 'overallFaultScoreLessSigns',
                minWidth: tableColumnWidth.md,
              },
            ]}
          />
        ),
      },
      {
        title: 'Bin Centre',
        component: (
          <FilterTab
            data={reportDetails.filter((item) => item.reportType === 'Bin Centre')}
            reportType="Bin Centre"
            specialColumns={[
              {
                Header: 'Bin Centre Address/ Closest Blk',
                accessor: 'address',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Postal Code',
                accessor: 'postalCode',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Town Council',
                accessor: 'townCouncil',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Signs of Rodent Infestation',
                accessor: 'signsOfRodentInfestation',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Bin Centre Defects',
                accessor: 'binCentreDefects',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Poor Practices',
                accessor: 'poorPractices',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Sanitation',
                accessor: 'sanitation',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Comparator Management',
                accessor: 'compactorManagement',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'CRC Score',
                accessor: 'conditionsOfCRCScore',
                minWidth: tableColumnWidth.md,
              },
              {
                Header: 'Overall Fault Score',
                accessor: 'overallFaultScore',
                minWidth: tableColumnWidth.md,
              },
            ]}
          />
        ),
      },
      // {
      //   title: 'Feedback',
      //   component: <FilterTab data={reportDetails.filter((item) => item.reportType === 'Feedback')} reportType="Feedback" />,
      // },
    ];
    setTabNavMenu(menus);
    toggleTabNav(menus.length > Number(previousTab) ? previousTab : '0');
  };

  const getListingAction = useCallback(() => {
    const onPending = () => setIsLoading(true);
    const onSuccess = (data) => {
      setIsLoading(false);
      setDetail(data);
      setData(data);
    };
    const onError = () => setIsLoading(false);
    actionTryCatchCreator(getDailyReportDetailService({ fileId: state?.fileId }), onPending, onSuccess, onError);
  }, [state]);

  const downloadReport = async () => {
    const { fileId } = detail;
    const downloadRequest = downloadFile({ fileId });
    const { status, data } = await downloadRequest.request;
    if (status === 200 && data.status === 'Pass') {
      const base64 = byteArrayToBase64(data.fileData);
      autoGenerateDownloadLink(data.fileName, data.fileType, base64);
    } else {
      toast.error(`Unable to load this file (ID: ${fileId}) : ${data.errorMessage}`);
    }
  };

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.RODENT_AUDIT.DAILY_REPORT_DETAIL.name}`;
    if (state?.fileId) {
      getListingAction();
    } else {
      history.goBack();
    }
  }, [history, state, getListingAction]);

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={WEB_ROUTES.RODENT_AUDIT.DAILY_REPORT.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.RODENT_AUDIT, WEB_ROUTES.RODENT_AUDIT.DAILY_REPORT]} />

          <div className="go-back d-flex align-items-center">
            <span onClick={() => history.goBack()}>{detail ? `${detail?.surveyDate} - ${detail?.ro} - ${detail?.division} ${detail?.grc}` : 'Go Back'}</span>
            {detail && (
              <button type="button" className="btn btn-sec m-1 ml-auto" onClick={downloadReport}>
                Download
              </button>
            )}
          </div>
          <nav className="tab__main">
            <div className="tabsContainer">
              <TabNav
                onToggleTab={(tab) => {
                  toggleTabNav(tab);
                  // previousTab = tab;
                }}
                activeTab={activeTabNav}
                menu={tabNavMenu.map((item) => item.title)}
              />
            </div>
          </nav>
          {tabNavMenu.map((menu, index) => (
            <div className={Number(activeTabNav) === index ? '' : 'd-none'} key={uuidv4()}>
              {menu.component}
            </div>
          ))}

          <InPageLoading isLoading={isLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

export default withRouter(DailyReportDetail);
