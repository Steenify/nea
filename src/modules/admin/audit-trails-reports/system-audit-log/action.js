import JSZip from 'jszip';
import { retrieveSystemAuditLogService, downloadSystemAuditLogService } from 'services/audit-trails-reports/system-audit-log';
import { getSysConfigurations } from 'services/file-operation';
import { actionCreator, actionTryCatchCreator, filterFunc, sortFunc, byteArrayToBase64, autoGenerateDownloadLinkWithBlob } from 'utils';

export const defaultFilterValue = {
  searchText: '',
  searchType: 'logFileName',
  datePickerValue: null,
  filterValue: null,
  sortValue: {
    id: 'logFileName',
    label: 'logFileName',
    desc: false,
  },
};

export const SYSTEM_AUDIT_LOG_SYS_CONFIG = actionCreator('SYSTEM_AUDIT_LOG_SYS_CONFIG');
export const getSysConfigAction = (params) => async (dispatch) => {
  const onPending = () => {
    dispatch({ type: SYSTEM_AUDIT_LOG_SYS_CONFIG.PENDING });
  };
  const onSuccess = (data) => {
    dispatch({
      type: SYSTEM_AUDIT_LOG_SYS_CONFIG.SUCCESS,
      payload: data,
    });
  };
  const onError = (error) => {
    dispatch({ type: SYSTEM_AUDIT_LOG_SYS_CONFIG.ERROR, payload: error });
  };

  await actionTryCatchCreator(getSysConfigurations(params), onPending, onSuccess, onError);
};

export const SYSTEM_AUDIT_LOG_LIST_FILTER = 'SYSTEM_AUDIT_LOG_LIST_FILTER';
export const filterListAction = (data = defaultFilterValue) => (dispatch, getState) => {
  const {
    adminReducers: {
      systemAuditLog: {
        data: { list },
      },
    },
  } = getState();
  const filterData = { ...defaultFilterValue, ...data };
  const { sortValue } = filterData;
  const filteredList = list.filter((item) => filterFunc(item, filterData)).sort((a, b) => sortFunc(a, b, sortValue));

  dispatch({
    type: SYSTEM_AUDIT_LOG_LIST_FILTER,
    payload: filteredList,
  });
};

export const SYSTEM_AUDIT_LOG_LIST = actionCreator('SYSTEM_AUDIT_LOG_LIST');
export const getListAction = (params) => async (dispatch) => {
  const onPending = () => {
    dispatch({ type: SYSTEM_AUDIT_LOG_LIST.PENDING });
  };
  const onSuccess = (data) => {
    dispatch({
      type: SYSTEM_AUDIT_LOG_LIST.SUCCESS,
      payload: data.systemAuditLogVoList,
    });

    dispatch(filterListAction());
  };
  const onError = (error) => {
    dispatch({ type: SYSTEM_AUDIT_LOG_LIST.ERROR, payload: error });
  };

  await actionTryCatchCreator(retrieveSystemAuditLogService(params), onPending, onSuccess, onError);
};

export const SYSTEM_AUDIT_LOG_DOWNLOAD = actionCreator('SYSTEM_AUDIT_LOG_DOWNLOAD');
export const downloadListAction = (params) => async (dispatch) => {
  const onPending = () => {
    dispatch({ type: SYSTEM_AUDIT_LOG_DOWNLOAD.PENDING });
  };
  const onSuccess = (data) => {
    dispatch({
      type: SYSTEM_AUDIT_LOG_DOWNLOAD.SUCCESS,
      payload: data,
    });
    const zip = new JSZip();
    data.forEach((item) => {
      const base64 = byteArrayToBase64(item?.file || []);
      zip.folder('System Audit Log').file(item?.fileName, base64, { base64: true });
      // autoGenerateDownloadLink(item?.fileName, item?.fileType, base64);
    });
    zip.generateAsync({ type: 'blob' }).then((blob) => autoGenerateDownloadLinkWithBlob('System Audit Log.zip', blob));
  };
  const onError = (error) => {
    dispatch({ type: SYSTEM_AUDIT_LOG_DOWNLOAD.ERROR, payload: error });
  };

  await actionTryCatchCreator(downloadSystemAuditLogService(params), onPending, onSuccess, onError);
};
