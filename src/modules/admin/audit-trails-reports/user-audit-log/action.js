import { retrieveUserAuditLogService, downloadUserAuditLogService } from 'services/audit-trails-reports/user-audit-log';
import { actionCreator, actionTryCatchCreator, filterFunc, sortFunc, byteArrayToBase64, autoGenerateDownloadLink } from 'utils';

export const defaultFilterValue = {
  searchText: '',
  searchType: 'userTable',
  datePickerValue: null,
  filterValue: null,
  sortValue: {
    id: 'date',
    label: 'Date',
    desc: false,
  },
};

// export const USER_AUDIT_LOG_LIST_FILTER = 'USER_AUDIT_LOG_LIST_FILTER';
export const USER_AUDIT_LOG_LIST_FILTER = actionCreator('USER_AUDIT_LOG_LIST_FILTER');
export const filterListAction = (data = defaultFilterValue) => (dispatch, getState) => {
  const {
    adminReducers: {
      userAuditLog: {
        data: { list },
      },
    },
  } = getState();

  const filterData = { ...defaultFilterValue, ...data };
  const { sortValue } = filterData;

  dispatch({
    type: USER_AUDIT_LOG_LIST_FILTER.PENDING,
  });

  let filteredList = list.filter((item) => filterFunc(item, filterData)).sort((a, b) => sortFunc(a, b, sortValue));

  dispatch({
    type: USER_AUDIT_LOG_LIST_FILTER.SUCCESS,
    payload: filteredList,
  });
};

export const USER_AUDIT_LOG_LIST = actionCreator('USER_AUDIT_LOG_LIST');
export const getListAction = (params) => async (dispatch) => {
  const onPending = () => {
    dispatch({ type: USER_AUDIT_LOG_LIST.PENDING });
  };
  const onSuccess = (data) => {
    dispatch({
      type: USER_AUDIT_LOG_LIST.SUCCESS,
      payload: data.userAuditLogVOList || [],
    });

    // dispatch(filterListAction());
  };
  const onError = (error) => {
    dispatch({ type: USER_AUDIT_LOG_LIST.ERROR, payload: error });
  };

  await actionTryCatchCreator(retrieveUserAuditLogService(params), onPending, onSuccess, onError);
};

export const USER_AUDIT_LOG_DOWNLOAD = actionCreator('USER_AUDIT_LOG_DOWNLOAD');
export const downloadListAction = (params) => async (dispatch) => {
  const onPending = () => {
    dispatch({ type: USER_AUDIT_LOG_DOWNLOAD.PENDING });
  };
  const onSuccess = (data) => {
    dispatch({
      type: USER_AUDIT_LOG_DOWNLOAD.SUCCESS,
      payload: data,
    });
    const base64 = byteArrayToBase64(data?.file || []);
    autoGenerateDownloadLink(`${data?.fileName}.xlsx`, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', base64);
  };
  const onError = (error) => {
    dispatch({ type: USER_AUDIT_LOG_DOWNLOAD.ERROR, payload: error });
  };

  await actionTryCatchCreator(downloadUserAuditLogService(params), onPending, onSuccess, onError);
};
