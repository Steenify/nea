import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { Formik, Form } from 'formik';
import { toast } from 'react-toastify';
import _ from 'lodash';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import PromptOnLeave from 'components/common/formik/prompt-on-leave';
import FormikSubmitErrorMessage from 'components/common/formik/submit-error-message';
import ValidationField from 'components/common/formik/validationField';
import DropBoxLocal from 'components/common/dropbox-local';
import { WEB_ROUTES, SUBMISSION_TYPE } from 'constants/index';

import { getMastercodeAction, MASTER_CODE } from 'store/actions';

import { dateAndTimeFromDB, dbDateTimeStringFrom, autoGenerateDownloadLinkWithBlob } from 'utils';

import { createAction, updateAction, defaultAddValue, getDropdownAction } from './action';

const NotificationTemplateDetail = (props) => {
  const {
    createAction,
    updateAction,
    getDropdownAction,
    location: { state },
    match: {
      params: { id },
    },
    history,
    ui: { isLoading },
    data: { notificationNameLOV },
    masterCodes,
    getMastercodeAction,
  } = props;

  const checkEmailType = (value) => value?.toLowerCase().includes('email');

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE_DETAIL.name}`;

    if (id !== 'edit' && id !== 'create') {
      history.replace(WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE.url);
    }
    getMastercodeAction([MASTER_CODE.NOTIFICATION_TEMPLATE_TYPE]);
    getDropdownAction();
  }, [id, getMastercodeAction, history, getDropdownAction]);

  const onSubmit = (values, actions) => {
    const formData = new FormData();
    // formData.maxDataSize = Infinity;
    formData.append('notificationType', masterCodes[MASTER_CODE.NOTIFICATION_TEMPLATE_TYPE].find((item) => item.value === values.notificationType || item.label === values.notificationType)?.label);
    formData.append('notificationName', values.notificationName);
    formData.append('effDate', dbDateTimeStringFrom(values.effDate, values.effTime));
    formData.append('expDate', dbDateTimeStringFrom(values.expDate, values.expTime));
    formData.append('remarks', values.remarks);

    if (checkEmailType(values.notificationType)) {
      formData.append('emailSubject', values.emailSubject);
    }

    const fileFieldName = checkEmailType(values.notificationType) ? 'emailContent' : 'attachment';
    if (values.attachmentLocal) {
      const file = values.attachmentLocal;
      formData.append(fileFieldName, new Blob([file]), file.name);
    } else {
      formData.append(fileFieldName, values.file, values.attachment?.fileItem?.fileName);
    }

    if (id === 'create') {
      createAction(formData).then(() => {
        actions.resetForm();
        toast.success('Success');
        history.goBack();
      });
    }
    if (id === 'edit') {
      formData.append('id', values.id);
      updateAction(formData).then(() => {
        actions.resetForm();
        toast.success('Success');
        history.goBack();
      });
    }
    actions.setSubmitting(false);
    actions.setErrors({});
  };

  const validate = (values) => {
    const errors = {};
    let errorCount = 0;

    if (!values.notificationType) {
      errors.notificationType = '(Required)';
      errorCount += 1;
    }
    if (!values.notificationName) {
      errors.notificationName = '(Required)';
      errorCount += 1;
    }
    if (!values.effDate) {
      errors.effDate = '(Required)';
      errorCount += 1;
    }
    if (!values.expDate) {
      errors.expDate = '(Required)';
      errorCount += 1;
    }
    if ((!values.attachmentLocal || values.attachmentLocal.length === 0) && !values.file) {
      errors.attachmentLocal = '(Required)';
      errorCount += 1;
    }
    if (!values.emailSubject && checkEmailType(values.notificationType)) {
      errors.emailSubject = '(Required)';
      errorCount += 1;
    }
    if (errorCount) {
      errors.errorCount = errorCount;
      errors.errorHint = `There are ${errorCount} issues.`;
    }
    return errors;
  };

  let initialValues = defaultAddValue();
  if (state?.detail) {
    const [effDate, effTime] = dateAndTimeFromDB(state?.detail.effDate);
    const [expDate, expTime] = dateAndTimeFromDB(state?.detail.expDate);
    const detail = { ...state?.detail, effDate, effTime, expDate, expTime };
    initialValues = _.merge({}, defaultAddValue(), detail);
  }

  const checkType = (a, b) => {
    const aL = a?.toLowerCase();
    const bL = b?.toLowerCase();
    return aL && bL && (aL.includes(bL) || bL.includes(aL));
  };

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.ADMINISTRATION, WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE, WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE_DETAIL]} />
          <Formik initialValues={initialValues} validate={validate} onSubmit={onSubmit} enableReinitialize>
            {({ values, setFieldValue, dirty, errors }) => (
              <Form>
                <PromptOnLeave dirty={dirty} />
                <div className="go-back d-flex align-items-center">
                  <span onClick={() => history.goBack()}>{WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE.name}</span>
                </div>
                <div className="tabsContainer">
                  <div className="row">
                    <div className="col-lg-12">
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex align-items-center justify-content-end">
                          <div className="font-weight-bold">Notification Type</div>
                        </div>
                        <div className="col col-lg-5">
                          <ValidationField
                            name="notificationType"
                            inputComponent="react-select"
                            placeholder="Notification Type"
                            options={masterCodes[MASTER_CODE.NOTIFICATION_TEMPLATE_TYPE]}
                            hideError
                          />
                        </div>
                      </div>
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex align-items-center justify-content-end">
                          <div className="font-weight-bold">Notification Name</div>
                        </div>
                        <div className="col col-lg-5">
                          <ValidationField
                            name="notificationName"
                            inputComponent="react-select"
                            placeholder="Notification Name"
                            options={notificationNameLOV
                              .filter((item) => checkType(item.notificationType, values.notificationType))
                              .map((item) => ({ label: item.notificationName, value: item.notificationName }))}
                            disabled={!values.notificationType}
                            hideError
                          />
                          {/* <ValidationField name="notificationName" inputClassName="textfield " hideError /> */}
                        </div>
                      </div>
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex align-items-center justify-content-end">
                          <div className="font-weight-bold">Effective Date</div>
                        </div>
                        <div className="col col-lg-5">
                          <ValidationField name="effDate" placeholder="Date" inputClassName="d-inline m-1" inputComponent="singleDatePickerV2" hideError />
                        </div>
                      </div>
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex align-items-center justify-content-end">
                          <div className="font-weight-bold">Expired Date</div>
                        </div>
                        <div className="col col-lg-5">
                          <ValidationField name="expDate" placeholder="Date" inputClassName="d-inline m-1" inputComponent="singleDatePickerV2" hideError />
                        </div>
                      </div>
                      {checkEmailType(values.notificationType) && (
                        <div className="row mb-3">
                          <div className="col-md-4 col-lg-3 d-flex align-items-center justify-content-end">
                            <div className="font-weight-bold">Email Subject</div>
                          </div>
                          <div className="col col-lg-5">
                            <ValidationField name="emailSubject" inputClassName="textfield " hideError />
                          </div>
                        </div>
                      )}
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex justify-content-end">
                          <div className="font-weight-bold text-right">
                            Remarks
                            <br />
                            (Optional)
                          </div>
                        </div>
                        <div className="col col-lg-5">
                          <ValidationField inputComponent="textarea" name="remarks" rows={5} hideError />
                        </div>
                      </div>
                      <div className="row mb-3">
                        <div className="col-md-4 col-lg-3 d-flex justify-content-end">
                          <div className="font-weight-bold">Attachment</div>
                        </div>
                        <div className="col col-lg-5">
                          <DropBoxLocal
                            name="attachmentLocal"
                            submissionType={SUBMISSION_TYPE.NOTIFICATION_TEMPLATE}
                            error={errors.attachmentLocal}
                            onChange={(file) => setFieldValue('attachmentLocal', file)}
                          />
                          {!values.attachmentLocal && values.file && (
                            <div className="upload-drop-zone__file mt-4 mb-4">
                              <ul>
                                <li>
                                  <span
                                    className="cursor-pointer"
                                    onClick={() => {
                                      autoGenerateDownloadLinkWithBlob(`${values.attachment?.fileItem?.fileName}.docx`, values.file);
                                    }}>
                                    {`1. ${values.attachment?.fileItem?.fileName}`}
                                  </span>
                                  <div
                                    className="remove-button"
                                    onClick={() => {
                                      // state.detail.file = undefined;
                                      setFieldValue('file', undefined);
                                    }}
                                  />
                                </li>
                              </ul>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  <FormikSubmitErrorMessage />
                  <div className="text-center mb-5">
                    <button type="button" className="btn btn-sec m-1" onClick={() => history.goBack()}>
                      Cancel
                    </button>
                    <button type="submit" className="btn btn-pri m-1">
                      Submit
                    </button>
                  </div>
                </div>
              </Form>
            )}
          </Formik>
          <InPageLoading isLoading={isLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global, adminReducers: { notificationTemplateDetail } }, ownProps) => ({
  ...ownProps,
  ...notificationTemplateDetail,
  masterCodes: global.data.masterCodes,
});

const mapDispatchToProps = {
  createAction,
  updateAction,
  getMastercodeAction,
  getDropdownAction,
};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(NotificationTemplateDetail));
