import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import BreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import DataTable from 'components/common/data-table';
import { Form, Formik } from 'formik';
import ValidationField from 'components/common/formik/validationField';

import { tableColumnWidth, WEB_ROUTES, SUBMISSION_TYPE } from 'constants/index';

import DropBox from 'components/common/dropbox';
import SubmitErrorMessage from 'components/common/formik/submit-error-message';
import { downloadFile } from 'services/file-operation';
import { byteArrayToBase64, autoGenerateDownloadLink, selectOptionsFromStringArray, configMissingFieldMessage, dateFromString, yearNumberLOVFromNumber } from 'utils';
import { ReactComponent as CloseIcon } from 'assets/svg/close.svg';
import MeatBallDropdown from 'components/common/meatball-dropdown';
import CustomModal from 'components/common/modal';
import { toast } from 'react-toastify';
import { listingAction, saveAction, uploadLapsesAction, lapseListingAction } from './action';

import { submissionDateTitle, submissionDeadlineTitle, notificationDateTitle, totalBatchesTitle, FormRow, newLapse } from './helper';

const title = WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPDATE_ADHOC_LAPSE.name;

const monthLOV = selectOptionsFromStringArray(
  Array(12)
    .fill(0)
    .map((_, index) => `${index + 1}`),
);

const yearLOV = yearNumberLOVFromNumber(1, 20);

const initialValues = {
  submissionDate: undefined,
  submissionDeadline: undefined,
  totalBatches: '',
  month: undefined,
  notificationDate: undefined,
  lapseCode: undefined,
  lapseDescription: undefined,
  ehiLapseFileList: [],
  ehiLapseFileVOList: [],
  year: undefined,
};

const ACTIONS = {
  ADDING: 'ADDING',
  UPDATING: 'UPDATING',
  SAVING: 'SAVING',
};

const AdHocLapse = (props) => {
  const {
    listingAction,
    saveAction,
    ui: { isLoading },
    history: { push },
    data: { list, lapseLOV },
    uploadLapsesAction,
    lapseListingAction,
  } = props;

  const [localLoading, setLocalLoading] = useState(false);

  const [editModal, setEditModal] = useState({ isShow: false, action: '' });
  const [uploadModal, setUploadModal] = useState(false);
  const [filesUploaded, setFilesUploaded] = useState([]);

  const { ADDING, UPDATING, SAVING } = ACTIONS;

  const [modal, setModal] = useState({ isShow: false, action: () => {}, header: '' });
  useEffect(() => {
    document.title = `NEA | ${title}`;
    listingAction();
    lapseListingAction();
  }, [lapseListingAction, listingAction]);

  const validate = (values) => {
    const {
      detail: { submissionDate = '', submissionDeadline = '', totalBatches = '', year = '', month = '', notificationDate = '', lapseCode = '' },
      action = '',
    } = values;
    const errors = { detail: {} };
    let errorCount = 0;
    const required = 'Required';
    let nan = false;
    if (action === ADDING) {
      if (!month) {
        errors.detail.month = required;
        errorCount += 1;
      }
      if (!year) {
        errors.detail.year = required;
        errorCount += 1;
      }
      if (submissionDateTitle(lapseCode) && !submissionDate) {
        errors.detail.submissionDate = required;
        errorCount += 1;
      }
      if (submissionDeadlineTitle(lapseCode) && !submissionDeadline) {
        errors.detail.submissionDeadline = required;
        errorCount += 1;
      }
      if (notificationDateTitle(lapseCode) && !notificationDate) {
        errors.detail.notificationDate = required;
        errorCount += 1;
      }
      if (totalBatchesTitle(lapseCode) && !totalBatches) {
        errors.detail.totalBatches = required;
        errorCount += 1;
      }
      if (totalBatchesTitle(lapseCode) && isNaN(Number(totalBatches))) {
        errors.detail.totalBatches = required;
        nan = true;
      }
      if (errorCount || nan) {
        errors.errorCount = nan ? errorCount + 1 : errorCount;
        const text = `${totalBatchesTitle(lapseCode)} must be a number.`;
        const missingText = errorCount > 0 ? configMissingFieldMessage(errorCount) : '';
        errors.errorHint = `${missingText}${missingText !== '' ? '. ' : ''}${nan ? text : ''}`;

        return errors;
      }
      return {};
    }
    return {};
  };
  const onSubmit = (values, { setSubmitting, setFieldValue }) => {
    setSubmitting(false);
    const { detail, data = [], action } = values;
    if (action === SAVING) {
      const lapsesListTemp = data.map((item) => ({
        ...item,
        ehiLapseFileList: item?.ehiLapseFileList?.map(({ fileId }) => fileId) || [],
      }));
      const leftIds = lapsesListTemp?.map(({ lapseId }) => lapseId);

      const deletedIds = list?.filter((item) => !leftIds?.includes(item?.lapseId)).map(({ lapseId }) => ({ lapseId, deleteFlag: true }));
      const lapsesList = [...lapsesListTemp.filter(({ isEdited }) => isEdited), ...deletedIds];
      saveAction({ lapsesList }, () => {
        setModal({
          header: 'List saved.',
          isShow: true,
          action: () => {
            listingAction();
          },
        });
      });
    } else {
      let added = {};
      const { submissionDate = '', submissionDeadline = '', lapseId = '' } = detail;
      if (!submissionDate || !submissionDeadline) {
        added = detail;
      } else {
        const date = dateFromString(submissionDate);
        const deadline = dateFromString(submissionDeadline);
        const noOfDaysLate = date.diff(deadline, 'days');
        added = { ...detail, noOfDaysLate: noOfDaysLate < 0 ? 0 : noOfDaysLate };
      }
      let items = [];
      if (!lapseId) {
        items = [...data, { ...added, isEdited: true }];
      } else {
        items = data.map((temp) => (temp.lapseId === lapseId ? { ...added, isEdited: true } : temp));
      }
      setFieldValue('data', items, false);
      setFieldValue('detail', initialValues, false);
      setEditModal({ isShow: false, action: '' });
    }
    setSubmitting(false);
  };

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={title} />
        <div className="contentWrapper">
          <BreadCrumb page={[WEB_ROUTES.EHI_GRAVITRAP_AUDIT, WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPDATE_ADHOC_LAPSE]} />
          <div className="main-title">
            <h1>{title}</h1>
          </div>
          <Formik enableReinitialize initialValues={{ detail: initialValues, data: list }} validate={validate} onSubmit={onSubmit}>
            {({ values: { detail = {}, data = [] }, isSubmitting, setFieldValue }) => {
              const lapseCode = detail?.lapseCode;
              const setLapseCode = (param = {}) => {
                setFieldValue('detail', { ...detail, ...newLapse, ...param }, true);
              };
              const removeLapse = (index) => {
                setFieldValue(
                  'data',
                  data.filter((item, i) => i !== index),
                  false,
                );
              };

              const columns = [
                {
                  Header: 'S/No',
                  accessor: 'lapseId',
                  minWidth: tableColumnWidth.xs,
                  Cell: ({ index }) => index + 1,
                },
                {
                  Header: 'Lapse',
                  accessor: 'lapseDescription',
                  minWidth: tableColumnWidth.xl,
                },
                {
                  Header: 'Year',
                  accessor: 'year',
                  minWidth: tableColumnWidth.sm,
                },
                {
                  Header: 'Month',
                  accessor: 'month',
                  minWidth: tableColumnWidth.sm,
                },
                {
                  Header: 'Deadline',
                  accessor: 'submissionDeadline',
                  minWidth: tableColumnWidth.lg,
                },
                {
                  Header: 'Actual Deployment / Submission Date',
                  accessor: 'submissionDate',
                  minWidth: tableColumnWidth.lg,
                },
                {
                  Header: 'Number of Items / Occasions Late',
                  accessor: 'totalBatches',
                  minWidth: tableColumnWidth.lg,
                },
                {
                  Header: 'Number of Days Late',
                  accessor: 'noOfDaysLate',
                  minWidth: tableColumnWidth.lg,
                },
                {
                  Header: 'Supporting Documents',
                  accessor: 'supportingDocuments',
                  minWidth: tableColumnWidth.lg,
                  Cell: ({ index }) => {
                    const { ehiLapseFileVOList = [] } = data[index];

                    return (
                      <div className="align-items-lg-start d-flex flex-column">
                        {ehiLapseFileVOList.map((item, i) => (
                          <span
                            key={`${i + 1}`}
                            className="cursor-pointer text-blue"
                            onClick={async () => {
                              const { fileId } = item;

                              if (!fileId) return;

                              setLocalLoading(true);

                              try {
                                const { status, data } = await downloadFile({ fileId }).request;
                                if (status === 200 && data.status === 'Pass') {
                                  const { fileName = '', fileData = '', fileType = '' } = data;
                                  const base64 = byteArrayToBase64(fileData);
                                  autoGenerateDownloadLink(fileName, fileType, base64);

                                  setLocalLoading(false);
                                } else {
                                  setLocalLoading(false);

                                  throw String(`Unable to load this file. (ID: ${fileId})`);
                                }
                              } catch (error) {
                                setLocalLoading(false);

                                throw String(`Unable to load this file. (ID: ${fileId})`);
                              }
                            }}>
                            {`${i + 1}. ${item.name}`}
                          </span>
                        ))}
                      </div>
                    );
                  },
                },
                {
                  Header: 'Updated By',
                  accessor: 'updatedBy',
                  minWidth: tableColumnWidth.lg,
                },
                {
                  Header: '',
                  accessor: 'action',
                  className: 'rt-overflow-visible',
                  minWidth: 200,
                  Cell: (cellInfo) => {
                    const { index } = cellInfo;
                    const selected = data[index] || cellInfo?.row?._original;
                    const { lapseId, isEditable } = selected;
                    return lapseId ? (
                      isEditable ? (
                        <MeatBallDropdown
                          actions={[
                            {
                              title: 'Delete',
                              onClick: () => {
                                removeLapse(index);
                              },
                            },
                            {
                              title: 'Update',
                              onClick: () => {
                                setFieldValue('detail', selected, true);
                                setEditModal({ isShow: true, action: UPDATING });
                              },
                            },
                          ]}
                        />
                      ) : null
                    ) : (
                      <span className="cursor-pointer">
                        <CloseIcon width={36} height={36} onClick={() => removeLapse(index)} />
                      </span>
                    );
                  },
                },
              ];
              return (
                <div className="tabsContainer">
                  <Form>
                    <DataTable
                      data={data}
                      columns={columns}
                      rightHeaderContent={
                        <div className="d-flex align-items-center">
                          <button type="button" className="btn btn-sec m-1" onClick={() => setUploadModal(true)}>
                            Upload Lapses
                          </button>
                          <button type="submit" disabled={isSubmitting} className="btn btn-pri m-1" onClick={() => setFieldValue('action', SAVING, false)}>
                            Confirm
                          </button>
                        </div>
                      }
                    />
                    {!editModal.isShow && (
                      <button
                        type="button"
                        className="btn btn-pri m-2"
                        onClick={() => {
                          setEditModal({ isShow: true, action: ADDING });
                        }}>
                        Add Lapses
                      </button>
                    )}
                    {editModal.isShow && (
                      <>
                        <SubmitErrorMessage />

                        <div className="card bg-white marginBottom30 mt-3">
                          <FormRow isPaddingBottom label="Lapse">
                            <ValidationField
                              name="detail.lapseCode"
                              inputComponent="react-select"
                              options={lapseLOV}
                              selectClassName="wf-650"
                              isClearable={false}
                              hideError
                              onChange={(value) => {
                                const find = lapseLOV.find((item) => item?.value === value);
                                setLapseCode({ lapseCode: find?.value || '', lapseDescription: find?.label });
                              }}
                            />
                          </FormRow>
                          {lapseCode && (
                            <>
                              <FormRow isPaddingBottom label="Year*">
                                <ValidationField name="detail.year" inputComponent="react-select" options={yearLOV} selectClassName="wf-200" isClearable={false} hideError />
                              </FormRow>
                              <FormRow isPaddingBottom label="Month*">
                                <ValidationField name="detail.month" inputComponent="react-select" options={monthLOV} selectClassName="wf-200" isClearable={false} hideError />
                              </FormRow>
                              {notificationDateTitle(lapseCode) && (
                                <FormRow isPaddingBottom label={notificationDateTitle(lapseCode)}>
                                  <ValidationField name="detail.notificationDate" inputComponent="singleDatePickerV2" inputClassName="d-contents" hideError />
                                </FormRow>
                              )}
                              {submissionDeadlineTitle(lapseCode) && (
                                <FormRow isPaddingBottom label={submissionDeadlineTitle(lapseCode)}>
                                  <ValidationField name="detail.submissionDeadline" inputComponent="singleDatePickerV2" inputClassName="d-contents" hideError />
                                </FormRow>
                              )}
                              {submissionDateTitle(lapseCode) && (
                                <FormRow isPaddingBottom label={submissionDateTitle(lapseCode)}>
                                  <ValidationField name="detail.submissionDate" inputComponent="singleDatePickerV2" inputClassName="d-contents" hideError />
                                </FormRow>
                              )}
                              {totalBatchesTitle(lapseCode) && (
                                <FormRow isPaddingBottom label={totalBatchesTitle(lapseCode)}>
                                  <ValidationField name="detail.totalBatches" inputClassName="textfield wf-200" hideError />
                                </FormRow>
                              )}
                              <FormRow label="Supporting Documents" />
                              <div className="mb-2" />
                              <FormRow isPaddingBottom>
                                <ValidationField
                                  name="detail.ehiLapseFileList"
                                  submissionType={SUBMISSION_TYPE.GRAVITRAP_SUPPORT_DOC}
                                  inputClassName="textfield wf-200"
                                  inputComponent="dropbox"
                                  deleteLocally
                                  onChange={(fileList) => {
                                    const files = fileList.map((file) => ({ fileId: file.fileId, name: file?.fileName || '' }));
                                    setFieldValue('detail.ehiLapseFileVOList', files, false);
                                  }}
                                />
                              </FormRow>
                              <div className="row">
                                <div className="col-12">
                                  <button
                                    type="button"
                                    className="btn btn-sec mr-3"
                                    disabled={isSubmitting}
                                    onClick={() => {
                                      setLapseCode();
                                      setEditModal({ isShow: false, action: '' });
                                    }}>
                                    Cancel
                                  </button>
                                  <button
                                    type="submit"
                                    className="btn btn-pri"
                                    disabled={isSubmitting}
                                    onClick={() => {
                                      setFieldValue('action', editModal.action, false);
                                    }}>
                                    {editModal.action === ADDING ? 'Add Lapse' : 'Update Lapse'}
                                  </button>
                                </div>
                              </div>
                            </>
                          )}
                        </div>
                      </>
                    )}
                  </Form>
                </div>
              );
            }}
          </Formik>
          <CustomModal
            isOpen={modal.isShow}
            type="system-modal"
            headerTitle={modal.header}
            // onCancel={() => setModal({ isShow: false, action: '' })}
            confirmTitle="OK"
            onConfirm={() => {
              setModal({ isShow: false });
              if (modal.action) modal.action();
            }}
          />
          <CustomModal
            headerTitle="Upload Documents for Ad-hoc Lapses"
            confirmTitle={filesUploaded.length === 0 ? '' : 'Upload'}
            isOpen={uploadModal}
            cancelTitle="Cancel"
            onConfirm={() => {
              const params = filesUploaded.map((fileId) => ({ fileId, fileType: 'ADHOCL' }));
              uploadLapsesAction(
                params,
                () => {
                  toast.success('Documents Uploaded');
                  setFilesUploaded([]);
                  setUploadModal(false);
                  listingAction();
                },
                (errorMsg) => {
                  const msg = errorMsg || '';
                  if (typeof msg !== 'string') return;
                  if (msg.includes('File Download')) {
                    setFilesUploaded([]);
                    setUploadModal(false);
                    push(WEB_ROUTES.NON_FUNCTIONAL.UPLOADED_FILES.url);
                  }
                },
              );
            }}
            onCancel={() => {
              setUploadModal(false);
            }}
            type="action-modal"
            content={
              <form className="form-group">
                <div className="row">
                  <div className="col-lg-12">
                    <DropBox
                      size="sm"
                      submissionType={SUBMISSION_TYPE.GRAVITRAP_AD_HOC_LAPSE}
                      fileIdList={filesUploaded}
                      onChange={(fileList) => {
                        const uploadedFileIds = fileList.map((file) => file.fileId);
                        setFilesUploaded(uploadedFileIds);
                      }}
                    />
                  </div>
                </div>
              </form>
            }
          />
          <InPageLoading isLoading={isLoading || localLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ ehiGravitrapAuditReducers: { adHocLapse } }, ownProps) => ({
  ...ownProps,
  ...adHocLapse,
});

const mapDispatchToProps = {
  listingAction,
  saveAction,
  uploadLapsesAction,
  lapseListingAction,
};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(AdHocLapse));
