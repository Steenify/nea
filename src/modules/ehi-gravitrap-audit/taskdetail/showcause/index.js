import React, { useState } from 'react';

import './style.scss';

import * as Formik from 'formik';
import ValidationField from 'components/common/formik/validationField';
import { autoGenerateDownloadLink } from 'utils';
import DropBox from 'components/common/dropbox';
import { SUBMISSION_TYPE } from 'constants/index';
import { downloadFile } from 'services/file-operation/';
import { byteArrayToBase64 } from 'utils';
import { toast } from 'react-toastify';
import BinaryFileGallery from 'components/common/binaryImageGallery';

const boolOptions = [
  { label: 'Yes', value: true },
  { label: 'No', value: false },
];

const FormRow = ({ label = '', text = '', isPaddingBottom = false }) => (
  <div className={`row ${isPaddingBottom ? 'paddingBottom30' : ''}`}>
    {label && <div className="col-md-3 col-lg-2 font-weight-bold">{label}</div>}
    <div className="col-md-9 col-lg-10">{text}</div>
  </div>
);

const NonSCShowCause = Formik.connect(({ formik: { setFieldValue }, initialLapseLOV = [] }) => {
  return (
    <>
      <div className="tab-pane__group bg-white">
        <div className="card">
          <div className="card-body">
            <div className="row marginBottom30">
              <div className="col-md-3 col-lg-2 font-weight-bold align-self-center">Initial Lapse Assessment</div>
              <div className="col-md-9 col-lg-10">
                <ValidationField name="analystInitialLapse.lapseCode" inputComponent="react-select" selectClassName="wf-400" placeholder="" options={initialLapseLOV} hideError />
              </div>
            </div>

            <div className="row marginBottom30">
              <div className="col-md-3 col-lg-2 font-weight-bold align-self-center">Recommend to show cause?</div>
              <div className="col-md-9 col-lg-10">
                <ValidationField
                  name="showCause"
                  inputComponent="react-select"
                  selectClassName="wf-200"
                  placeholder=""
                  options={boolOptions}
                  isClearable={false}
                  onChange={(value) => {
                    if (value) {
                      setFieldValue('showCause', true, true);
                    } else {
                      setFieldValue('showCause', false, true);
                    }
                  }}
                  hideError
                />
              </div>
            </div>

            <div className="showcause__title">Remarks</div>
            <div className="showcause__control">
              <ValidationField name="showCauseRemarks" inputComponent="textarea" rows={5} placeholder="Optional" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
});

const SCShowCause = Formik.connect(({ formik: { values, setFieldValue }, initialLapseLOV = [], finalLapseLOV = [] }) => {
  const initialLapseSelected = initialLapseLOV.find((item) => item.value == values?.analystInitialLapse?.lapseCode || '');
  return (
    <>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer's Initial Lapse Assessment</div>
        <div className="card">
          <div className="card-body">
            <FormRow text={initialLapseSelected?.label || ''} isPaddingBottom />
            {/* <FormRow label="Remarks" text={values?.analystInitialLapse?.remarks || ''} /> */}
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer's Recommendation to Show Cause</div>
        <div className="card">
          <div className="card-body">
            <FormRow label="Recommend to show cause" text={values?.showCause ? 'Yes' : 'No'} isPaddingBottom />
            <FormRow label="Remarks" text={values?.showCauseRemarks || ''} />
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white">
        <div className="tab-pane__title text-white">Outsourced Contractor's Correspondence</div>
        <div className="card">
          <div className="card-body">
            <DropBox
              size="sm"
              submissionType={SUBMISSION_TYPE.GRAVITRAP_SUPPORT_DOC}
              fileIdList={values?.showcaseFileList?.map(({ fileId }) => fileId) || []}
              onChange={(fileList) => {
                const fileIds = fileList.map((file) => ({ fileId: file.fileId }));
                setFieldValue('showcaseFileList', fileIds);
              }}
            />
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer's Final Lapse Assessment</div>
        <div className="card">
          <div className="card-body">
            <div className="row marginBottom30">
              <div className="col-md-3 col-lg-2 font-weight-bold align-self-center">Final Lapse Assessment</div>
              <div className="col-md-9 col-lg-10">
                <ValidationField name="analystFinalLapse.lapseCode" inputComponent="react-select" selectClassName="wf-400" placeholder="" options={finalLapseLOV} hideError />
              </div>
            </div>

            <div className="showcause__title">Remarks</div>
            <div className="showcause__control">
              <ValidationField name="analystFinalLapse.remarks" inputComponent="textarea" rows={5} placeholder="Optional" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
});

const ConcurShowCause = Formik.connect(({ formik: { values, setFieldValue }, finalLapseLOV = [], initialLapseLOV = [], isSupport = false }) => {
  const [disable, setDisable] = useState(false);

  const initialLapseSelected = initialLapseLOV.find((item) => item.value == values?.analystInitialLapse?.lapseCode || '');
  const finalLapseSelected = finalLapseLOV.find((item) => item.value == values?.analystFinalLapse?.lapseCode || '');
  const managerSelected = finalLapseLOV.find((item) => item.value == values?.managerLapse?.lapseCode || '');
  const fileList = values?.showcaseFileList || [];
  const downloadAttachments = async () => {
    setDisable(true);
    for (var i = 0; i < fileList.length; i++) {
      const { fileId, fileName } = fileList[i] || '';

      try {
        const { status, data } = await downloadFile({ fileId }).request;
        if (status === 200 && data.status === 'Pass') {
          const { fileName = '', fileData = '', fileType = '' } = data;
          const base64 = byteArrayToBase64(fileData);
          autoGenerateDownloadLink(fileName, fileType, base64);
        } else {
          toast.error(`Unable to Download ${fileName}`);
        }
      } catch (error) {
        toast.error(`Unable to Download ${fileName}`);
      }
    }
  };
  return (
    <>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer’s Initial Lapse Assessment</div>
        <div className="card">
          <div className="card-body">
            <FormRow text={initialLapseSelected?.label || ''} isPaddingBottom />
            {/* <FormRow label="Remarks" text={values?.analystInitialLapse?.remarks || ''} /> */}
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer's Recommendation to Show Cause</div>
        <div className="card">
          <div className="card-body">
            <FormRow label="Recommend to show cause" text={values?.showCause ? 'Yes' : 'No'} isPaddingBottom />
            <FormRow label="Remarks" text={values?.showCauseRemarks || ''} />
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white">
        <div className="tab-pane__title text-white">Outsourced Contractor's Correspondence</div>
        <div className="card">
          <div className="card-body">
            {fileList.length > 0 && <FormRow label="Updated as at" text={values?.updatedAsAt} isPaddingBottom />}
            <div className="row paddingBottom30">
              <div className="col-md-3 col-lg-2 font-weight-bold">Attachment(s)</div>
              <div className="col-md-9 col-lg-10">
                <BinaryFileGallery fileIdList={fileList?.map((photo) => photo.fileId)} />
              </div>
            </div>

            {/* {fileList.length > 0 && (
              <div className="row">
                <div className="col-12">
                  <button className="btn btn-sec" type="button" onClick={downloadAttachments}>
                    Download Attachments
                  </button>
                </div>
              </div>
            )} */}
          </div>
        </div>
      </div>
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Technical Officer’s Final Lapse Assessment</div>
        <div className="card">
          <div className="card-body">
            <FormRow text={finalLapseSelected?.label || ''} isPaddingBottom />
            <FormRow label="Remarks" text={values?.analystFinalLapse?.remarks || ''} />
          </div>
        </div>
      </div>
      {values?.rejectFlag && (
        <div className="tab-pane__group bg-white ">
          <div className="tab-pane__title text-white"> LD Rejection Remarks</div>
          <div className="card">
            <div className="card-body">
              <FormRow label="Remarks" text={values?.rejectRemark || ''} />
            </div>
          </div>
        </div>
      )}
      <div className="tab-pane__group bg-white ">
        <div className="tab-pane__title text-white">EHI Unit Leader’s Final Lapse Assessment</div>
        <div className="card">
          {isSupport ? (
            <div className="card-body">
              <FormRow label="Concur with EHI Technical Officer's Assessment" text={values?.managerConcurStatus ? 'Yes' : 'No'} isPaddingBottom />
              {!values?.managerConcurStatus && <FormRow text={managerSelected?.label || ''} isPaddingBottom />}
              <FormRow label="Remarks" text={values?.managerRemarks || ''} />
            </div>
          ) : (
            <div className="card-body">
              <div className="row marginBottom30">
                <div className="col-md-3 col-lg-2 font-weight-bold align-self-center">Concur with EHI Technical Officer's Assessment?</div>
                <div className="col-md-9 col-lg-10">
                  <ValidationField
                    name="concurStatus"
                    inputComponent="react-select"
                    selectClassName="wf-200"
                    placeholder=""
                    options={boolOptions}
                    isClearable={false}
                    onChange={(value) => {
                      if (value) {
                        setFieldValue('concurStatus', true, true);
                      } else {
                        setFieldValue('concurStatus', false, true);
                      }
                    }}
                    hideError
                  />
                </div>
              </div>

              {values?.concurStatus === false && (
                <div className="row marginBottom30">
                  <div className="col-md-3 col-lg-2 font-weight-bold align-self-center">Final Lapse Assessment</div>
                  <div className="col-md-9 col-lg-10">
                    <ValidationField name="managerLapse.lapseCode" inputComponent="react-select" selectClassName="wf-400" placeholder="" options={finalLapseLOV} hideError />
                  </div>
                </div>
              )}

              <div className="showcause__title">Remarks</div>
              <div className="showcause__control">
                <ValidationField name="managerRemarks" inputComponent="textarea" rows={5} placeholder="Optional" />
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
});

const ShowCause = ({ isSupport = false, isSC = false, isConcur = false, initialLapseLOV = [], finalLapseLOV = [] }) => {
  if (isConcur) {
    return <ConcurShowCause initialLapseLOV={initialLapseLOV} finalLapseLOV={finalLapseLOV} isSupport={isSupport} />;
  }
  return isSC ? <SCShowCause initialLapseLOV={initialLapseLOV} finalLapseLOV={finalLapseLOV} /> : <NonSCShowCause initialLapseLOV={initialLapseLOV} finalLapseLOV={finalLapseLOV} />;
};

export default ShowCause;
