import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import NewBreadCrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
// import InPageLoading from 'components/common/inPageLoading';

import { generateBarcodeService, getDefaultBarcodeQuantityService } from 'services/vector-inspection';

import { actionTryCatchCreator, byteArrayToBase64, printBase64, autoGenerateDownloadLink } from 'utils';

import './style.scss';
import { toast } from 'react-toastify';
import { WEB_ROUTES } from 'constants/index';

const PrintScannableCodeLabels = (_props) => {
  // const {
  //   ui: { isLoading },
  // } = props;

  const maxQuantity = 200;
  const [barcodeCount, setBarcodeCount] = useState(20);

  const getDefaultBarcodeQuantityAction = () => {
    actionTryCatchCreator(
      getDefaultBarcodeQuantityService(),
      null,
      (data) => {
        setBarcodeCount(data.defaultQuantity);
      },
      null,
    );
  };

  const generateBarcodeAction = () => {
    if (!barcodeCount) {
      toast.error('Please enter the quantity to be printed.');
      return;
    }
    if (barcodeCount > maxQuantity) {
      toast.error(`Exceeded maximum quantity (${maxQuantity}).`);
      return;
    }

    const ua = window.navigator.userAgent;
    const isIE = /MSIE|Trident|Edge\//.test(ua);

    actionTryCatchCreator(
      generateBarcodeService({ noOfBarcodes: barcodeCount }),
      null,
      (data) => {
        if (data.status === 'Fail') {
          const errors = data?.errorMessage || [];
          toast.error('Fail to sprint Barcode.', errors.join(','));
          return;
        }
        if (isIE) {
          autoGenerateDownloadLink('Scannable_Code.pdf', 'application/pdf', byteArrayToBase64(data.fileData));
        } else {
          printBase64(byteArrayToBase64(data.fileData));
        }
      },
      null,
    );
  };

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_SCANNABLE_CODE_LABELS.name}`;
    getDefaultBarcodeQuantityAction();
  }, []);

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_SCANNABLE_CODE_LABELS.name} />
        <div className="contentWrapper">
          <NewBreadCrumb page={[WEB_ROUTES.INSPECTION_MANAGEMENT, WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_SCANNABLE_CODE_LABELS]} />
          <div className="main-title">
            <h1>{WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_SCANNABLE_CODE_LABELS.name}</h1>
          </div>
          <div className="print-barcode--id tabsContainer mb-5 mt-5">
            <div className="row">
              <div className="col-2">
                <span className="print--title">Print Labels</span>
              </div>
              <div className="col-9">
                <div className="print--form-control xs-paddingBottom10">
                  <input type="number" min="0" className="form-control" placeholder="-Quantity-" value={barcodeCount} onChange={(e) => setBarcodeCount(e.target.value)} />
                </div>
                <div className="print--button">
                  <button type="button" className="btn btn-pri" onClick={generateBarcodeAction}>
                    Print
                  </button>
                </div>
              </div>
            </div>
          </div>
          {/* <InPageLoading isLoading={isLoading} /> */}
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ vectorInspectionReducers: { printScannableCodeReducer } }, ownProps) => ({
  ...ownProps,
  ...printScannableCodeReducer,
});

const mapDispatchToProps = {};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(PrintScannableCodeLabels));
