import React, { useEffect } from 'react';

import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Breadcrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';

import 'rc-time-picker/assets/index.css';
import moment from 'moment';

import './style.scss';
import { byteArrayToBase64, autoGenerateDownloadLink, configMissingFieldMessage, dateFromString } from 'utils';
import { getMastercodeAction, MASTER_CODE } from 'store/actions';
import InPageLoading from 'components/common/inPageLoading';
import { NOTICE_TYPE, WEB_ROUTES } from 'constants/index';
import { Formik, Form } from 'formik';
import ValidationField from 'components/common/formik/validationField';
import SubmitErrorMessage from 'components/common/formik/submit-error-message';
import GoBackButton from 'components/ui/go-back-button';
import { generateCLAction } from './action';

const clusterOptions = [
  { value: 'cluster', label: 'Cluster' },
  { value: 'nonCluster', label: 'Non Cluster' },
];

const PrintCallLetter = ({ ui: { isLoading = false }, getMastercodeAction, generateCLAction, diseaseLOV = [], location: { state = {} }, history }) => {
  const { units = [], block = {}, address = '', isLanded = false } = state;

  useEffect(() => {
    getMastercodeAction([MASTER_CODE.DISEASE_TYPE]);
  }, [getMastercodeAction]);

  const onDownloadSuccessHandler = (data) => {
    const { noticeFileName, noticeFile } = data;
    autoGenerateDownloadLink(noticeFileName, '', byteArrayToBase64(noticeFile));
    history.goBack();
  };

  const validate = (values) => {
    const { disease, clusterType, nonClusterText, clusterDate, clusterFromTime, clusterToTime } = values;
    const errors = {};
    let errorCount = 0;
    const required = 'Required';
    let timeHasError = false;
    let timeInPast = false;

    if (!clusterType) {
      errors.clusterType = required;
      errorCount += 1;
    }
    if (clusterType === 'cluster') {
      if (!disease) {
        errors.disease = required;
        errorCount += 1;
      }
      if (clusterDate || clusterFromTime || clusterToTime) {
        if (!clusterDate) {
          errors.clusterDate = required;
          errorCount += 1;
        }
        if (!clusterFromTime) {
          errors.clusterFromTime = required;
          errorCount += 1;
        }
        if (!clusterToTime) {
          errors.clusterToTime = required;
          errorCount += 1;
        }
        if (clusterDate || clusterFromTime || clusterToTime) {
          if (!dateFromString(clusterToTime).isAfter(dateFromString(clusterFromTime))) {
            timeHasError = true;
            errors.clusterToTime = required;
            errors.clusterFromTime = required;
          } else if (dateFromString(clusterDate).isSame(moment(), 'date')) {
            if (!dateFromString(clusterFromTime).isAfter(moment())) {
              timeInPast = true;
              errors.clusterFromTime = required;
            }
          }
        }
      }
    }
    if (clusterType === 'nonCluster') {
      if (!nonClusterText) {
        errors.nonClusterText = required;
        errorCount += 1;
      }
    }
    if (errorCount || timeHasError || timeInPast) {
      const timeError = timeHasError ? 'Inspection Time From must be before Inspection Time To.' : timeInPast ? 'Inspection Date Time From must be before current date time' : '';
      errors.errorCount = errorCount > 0 ? errorCount : 1;
      errors.errorHint = errorCount > 0 ? configMissingFieldMessage(errorCount) : timeError;
    }
    return errors;
  };
  const initialValues = {
    disease: '',
    clusterType: '',
    clusterDate: '',
    nonClusterText: '',
    clusterFromTime: '',
    clusterToTime: '',
    units,
  };

  const onSubmit = (values, { resetForm, setSubmitting }) => {
    const { postalCode, blockHouseNo } = block;
    const { disease, clusterType, clusterDate, nonClusterText, clusterFromTime, clusterToTime, units } = values;
    const initialParam = {
      noticeType: NOTICE_TYPE.CL.key,
      postalCode,
      blockHouseNo,
      callLetterType: clusterType,
    };
    if (clusterType === 'cluster') {
      const clusterDateParam = clusterDate === '' ? {} : { inspectionDate: clusterDate };
      const clusterFromTimeParam = clusterFromTime === '' ? {} : { inspectionTimeFrom: clusterFromTime };
      const clusterToTimeParam = clusterToTime === '' ? {} : { inspectionTimeTo: clusterToTime };
      generateCLAction(
        {
          ...initialParam,
          diseaseType: disease,
          notices: isLanded
            ? [{ ...clusterDateParam, ...clusterFromTimeParam, ...clusterToTimeParam }]
            : units.map(({ floorNo, unitNo }) => ({
                ...clusterDateParam,
                ...clusterFromTimeParam,
                ...clusterToTimeParam,
                floorNo,
                unitNo,
              })),
        },
        onDownloadSuccessHandler,
      );
    } else {
      generateCLAction(
        {
          ...initialParam,
          nonClusterRemark: nonClusterText,
          notices: isLanded
            ? [{}]
            : units.map(({ floorNo, unitNo }) => ({
                floorNo,
                unitNo,
              })),
        },
        onDownloadSuccessHandler,
      );
    }
    resetForm();
    setSubmitting(false);
  };

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION.name} />
        <div className="contentWrapper">
          <Breadcrumb page={[WEB_ROUTES.INSPECTION_MANAGEMENT, WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION, WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_CALL_LETTER]} />
          <GoBackButton onClick={history.goBack} title="Back to Call Letter" />

          <Formik initialValues={initialValues} validate={validate} onSubmit={onSubmit}>
            {({ values, isSubmitting }) => {
              const { units, clusterType } = values;
              return (
                <Form>
                  <div className="tabsContainer">
                    <SubmitErrorMessage />
                  </div>
                  <div className="mainBox">
                    <div className="row paddingBottom20">
                      <div className="col-lg-3 bold-font">Address of owner/occupier</div>
                      <div className="col-lg-9 bold-font text-blue">{address}</div>
                    </div>
                    {!isLanded && (
                      <div className="row">
                        <div className="col-md-3 col-lg-3">
                          <div className="paddingBottom30">
                            <table className="simpleTbl">
                              <thead>
                                <tr>
                                  <td align="left" valign="middle" className="bold-font">
                                    Unit
                                  </td>
                                </tr>
                              </thead>
                              <tbody>
                                {units.map((unit) => (
                                  <tr key={`unit-id-${[unit.floorNo, unit.unitNo].join('-')}`}>
                                    <td align="left" valign="middle">
                                      {[unit.floorNo, unit.unitNo].join('-')}
                                    </td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    )}
                    <div>
                      <div className="row paddingBottom20">
                        <div className="col-lg-3 col-md-3 small-grey-text mr-0">Select Call Letter</div>
                        <div className="col-lg-5 col-md-9">
                          <div className="navtab-select form-group">
                            <ValidationField name="clusterType" inputComponent="react-select" selectClassName="d-inline-block wf-400" options={clusterOptions} hideError />
                          </div>
                        </div>
                      </div>
                      {clusterType === 'cluster' && (
                        <div className="row paddingBottom20">
                          <div className="col-lg-3 col-md-3 small-grey-text mr-0">Disease Type</div>
                          <div className="col-lg-5 col-md-9">
                            <div className="navtab-select form-group" styles={{ height: '40px' }}>
                              {/* <Select options={diseaseLOV} value={disease} onChange={setDisease} isClearable /> */}
                              <ValidationField name="disease" inputComponent="react-select" selectClassName="d-inline-block wf-400" options={diseaseLOV} hideError />
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {clusterType === 'cluster' && (
                      <>
                        <div className="title bold-font paddingTop10 paddingBottom20">Next round of inspection (optional)</div>
                        <div>
                          <div className="row paddingBottom20">
                            <div className="col-lg-3 small-grey-text mr-0">Date</div>
                            <div className="col-lg-9 ">
                              <ValidationField name="clusterDate" placeholder="DD/MM/YYYY" inputComponent="singleDatePickerV2" minDate={moment()} />
                            </div>
                          </div>
                          <div className="row paddingBottom20">
                            <div className="col-lg-3 col-md-2 small-grey-text mr-0">Time</div>
                            <div className="col-lg-9 col-md-10 ">
                              <div className="time-picker-box d-flex">
                                <div className="mr-5">
                                  <span className="marginRight20">From</span>
                                  <div>
                                    <ValidationField name="clusterFromTime" inputComponent="timePicker" placeholder="hh:mm a" hideError />
                                  </div>
                                </div>
                                <div>
                                  <span className="">To</span>
                                  <div>
                                    <ValidationField name="clusterToTime" inputComponent="timePicker" placeholder="hh:mm a" hideError />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </>
                    )}
                    {clusterType === 'nonCluster' && <ValidationField name="nonClusterText" inputComponent="textarea" rows={5} hideError />}
                  </div>
                  <div className="btnWrapper">
                    <button type="submit" className="btn btn-pri" disabled={isSubmitting}>
                      Download
                    </button>
                  </div>
                </Form>
              );
            }}
          </Formik>

          <Footer />
          <InPageLoading isLoading={isLoading} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ global: { data: masterCodes }, vectorInspectionReducers: { printCallLetter } }) => ({
  ...printCallLetter,
  diseaseLOV: masterCodes?.masterCodes[MASTER_CODE.DISEASE_TYPE] || [],
});

const mapDispatchToProps = { getMastercodeAction, generateCLAction };
export default connect(mapStateToProps, mapDispatchToProps)(withRouter(PrintCallLetter));
