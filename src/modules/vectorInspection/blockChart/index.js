import React, { useState, useEffect } from 'react';

import { Link, withRouter, Redirect } from 'react-router-dom';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Breadcrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import { connect } from 'react-redux';
import InPageLoading from 'components/common/inPageLoading';
import './style.scss';
import CustomModal from 'components/common/modal';
import { autoGenerateDownloadLinkWithBlob, unitSortFunc } from 'utils';
import html2canvas from 'html2canvas';
import { NOTICE_TYPE, WEB_ROUTES } from 'constants/index';
import GoBackButton from 'components/ui/go-back-button';
import { getBlockChartAction, getApprovedNoticeAction } from './action';

const ACTION_TYPES = {
  GENERATING: {
    CL: 'canGenerateCallLetter',
    S35: 'canGenerateS35',
    S35R: 'canGenerateS35R',
    S36: 'canGenerateS36',
  },
  INSERTING: {
    CL: 'canInsertCallLetter',
    S35: 'canInsertS35',
    S35R: 'canInsertS35R',
  },
  ENFORCE: {
    S35: 'canEnforceS35',
  },
  NONE: 'none',
};

const BlockChart = ({
  getBlockChartAction,
  // getApprovedNoticeAction,
  ui: { isLoading },
  data: {
    blockHouseNo = 'BLK',
    roadName = '',
    postalCode = '',
    inspectionDateFrom = '',
    inspectionDateTo = '',
    canGenerateCallLetter = false,
    canGenerateS35 = false,
    canGenerateS35R = false,
    canGenerateS36 = false,
    canInsertCallLetter = false,
    canInsertS35 = false,
    canInsertS35R = false,
    canViewCallLetter = false,
    canViewS35 = false,
    canViewS35R = false,
    canViewS36 = false,
    canEnforceS35 = false,
    summary: {
      // gravitrapPositive = 0, gravitrapTotal = 0,
      totalUnits = 0,
      checked = 0,
      refused = 0,
      vacant = 0,
      locked = 0,
      totalBalance = 0,
      numberOfBreeding = 0,
      accessibility = '0%',
    },
    levels = [],
    totalCLIssued = 0,
    totalS35Issued = 0,
    totalS35RIssued = 0,
    totalS36Issued = 0,
  },
  location: { pathname, state },
  history: { goBack, push },
}) => {
  const [isShowConfirmModal, setShowConfirmModal] = useState(false);
  const [selectedUnits, setSelectedUnits] = useState([]);
  const [currentAction, setCurrentAction] = useState(ACTION_TYPES.NONE);

  const toggleConfirmModal = () => setShowConfirmModal(!isShowConfirmModal);
  const block = state?.block || null;
  const parent = state?.parent || '';
  const fromLatest = state?.fromLatest || false;
  const setOfColumns = new Set(levels.map((item) => item?.units?.filter((unit) => unit.isUnitExisted).map((unit) => unit?.unitNo || 0) || []).flat(Infinity));
  const columns = [...setOfColumns].sort((a, b) => {
    const flA = Number(a) || 0;
    const flB = Number(b) || 0;
    return flA - flB;
  });

  const address = [blockHouseNo, roadName, postalCode].filter((i) => i).join(', ');

  useEffect(() => {
    document.title = 'NEA | Block Chart';
    if (!block) return;
    const { inspectionDateFrom, inspectionDateTo, postalCode, blockHouseNo } = block;
    getBlockChartAction(
      {
        inspectionDateFrom,
        inspectionDateTo,
        postalCode,
        blockHouseNo,
      },
      fromLatest,
    );
  }, [block, fromLatest, getBlockChartAction]);

  if (!block) {
    return <Redirect to={pathname.slice(0, pathname.lastIndexOf('/'))} />;
  }

  const onDownload = async (event) => {
    event.preventDefault();
    const header = await html2canvas(document.querySelector('#table_for_download'));
    const footer = await html2canvas(document.querySelector('#table_for_download_footer'));
    const newCanvas = document.createElement('canvas');
    const ctx = newCanvas.getContext('2d');
    const width = header.width > footer.width ? header.width : footer.width;
    const height = header.height + footer.height;

    newCanvas.width = width;
    newCanvas.height = height;
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, width, height);
    [
      {
        cnv: header,
        y: 0,
      },
      {
        cnv: footer,
        y: header.height,
      },
    ].forEach((n) => {
      ctx.beginPath();
      ctx.drawImage(n.cnv, 0, n.y, n.cnv.width, n.cnv.height);
    });

    newCanvas.toBlob(
      (blob) => {
        autoGenerateDownloadLinkWithBlob('BlockChart', blob);
      },
      'image/png',
      0.95,
    );
  };

  const onViewApproved = (type) => {
    // const noticeType = type?.key || '';
    const { postalCode, blockHouseNo } = block;
    push(WEB_ROUTES.INSPECTION_MANAGEMENT.NOTICE_OF_ENTRY.url, { noticeType: type, postalCode, blockHouseNo, parent });
  };

  const selectAllUnitForAction = (actionType) => {
    const result = [];
    levels.forEach((level) => {
      const units = level?.units || [];
      const {
        floorNo,
        //  gravitrapPositive, gravitrapTotal
      } = level;
      columns.forEach((unitNo) => {
        const unit = units.find((temp) => temp.isUnitExisted && temp.unitNo === unitNo);
        if (unit) {
          if (actionType !== ACTION_TYPES.NONE) {
            const selected = { ...unit, floorNo };
            const b = unit[actionType] || false;
            if (b) {
              result.push(selected);
            }
          }
        }
      });
    });
    setSelectedUnits(result);
    return result;
  };

  const TitleDiv = () => <GoBackButton onClick={goBack} title={`Back to ${address}`} />;

  const BodyDiv = () => (
    <div className="bg-white paddingLeft30 paddingRight30 paddingTop30 paddingBottom10">
      <div className="row">
        <div className="col-md-12">
          <div>
            <button type="button" className="btn btn-pri" onClick={onDownload}>
              Download Block Summary
            </button>
          </div>
        </div>
      </div>
      <div className="row">
        <div className={`col-md-2 offset-md-10 paddingTop30 ${fromLatest ? 'paddingBottom10' : ''}`}>
          <span style={{ color: '#0077ff', cursor: 'pointer' }} className="text-blue" onClick={toggleConfirmModal}>
            View Legend
          </span>
        </div>
      </div>
      {!fromLatest && (
        <div className="row">
          <div className="col-md-12">
            <div>{`Inspection Date: ${inspectionDateFrom} to ${inspectionDateTo}`}</div>
          </div>
        </div>
      )}
    </div>
  );

  const BlockChartSummary = () => (
    <div className="blkChartSummary">
      <div className="cols text-center">
        <div className="label">Total Units</div>
        <div className="display bold-font">{totalUnits}</div>
      </div>
      <div className="cols text-center">
        <div className="label">Checked</div>
        <div className="display bold-font">{checked}</div>
      </div>
      <div className="cols text-center text-blue">
        <div className="label">Refused</div>
        <div className="display bold-font">{refused}</div>
      </div>
      <div className="cols text-center text-blue">
        <div className="label">Vacant</div>
        <div className="display bold-font">{vacant}</div>
      </div>
      <div className="cols text-center text-blue">
        <div className="label">Locked</div>
        <div className="display bold-font">{locked}</div>
      </div>
      <div className="cols text-center">
        <div className="label">Total Balance</div>
        <div className="display bold-font">{totalBalance}</div>
      </div>
      <div className="cols text-center">
        <div className="label">No. of Breeding</div>
        <div className="display bold-font">{numberOfBreeding}</div>
      </div>
      <div className="cols text-center">
        <div className="label">Accessibility</div>
        <div className="display bold-font">{accessibility}</div>
      </div>
      <div className="clearfix" />
    </div>
  );

  const BlockChartSubSummary = () => {
    const totalGravitrapPositive = levels.map((item) => item.gravitrapPositive || 0).reduce((a, b) => a + b, 0);
    const totalGravitrap = levels.map((item) => item.gravitrapTotal || 0).reduce((a, b) => a + b, 0);
    return (
      <div className="row">
        <div className="col-md-7">
          <div className="gravitrapSummary">
            <div className="gravitrapLHS">Gravitrap</div>
            <div className="gravitrapRHS">{`Positive : ${totalGravitrapPositive} | Total : ${totalGravitrap}`}</div>
          </div>
        </div>
        <div className="col-md-3 offset-md-2 marginTop30 text-right">
          <Link
            to={{
              pathname: `${pathname.slice(0, pathname.lastIndexOf('/'))}/breeding-summary`,
              state: { block, parent, fromLatest },
            }}
            className="btn btn-sec">
            Breeding Summary
          </Link>
        </div>
      </div>
    );
  };

  const onCurrentActionChanged = (actionType = ACTION_TYPES.NONE) => {
    if (actionType === ACTION_TYPES.ENFORCE.S35) {
      const units = selectAllUnitForAction(actionType);
      const unitData = units?.sort(unitSortFunc) || [];
      push(WEB_ROUTES.INSPECTION_MANAGEMENT.ENFORCE_S35.url, {
        unitData,
        block,
        address,
        noticeType: NOTICE_TYPE.S35,
      });
    } else if (currentAction === ACTION_TYPES.NONE || currentAction !== actionType) {
      setCurrentAction(actionType);
      selectAllUnitForAction(actionType);
    } else if (selectedUnits.length === 0) {
      setCurrentAction(ACTION_TYPES.NONE);
    } else {
      const unitData = selectedUnits.sort(unitSortFunc);
      switch (actionType) {
        case ACTION_TYPES.GENERATING.CL:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_CALL_LETTER.url, { units: selectedUnits, block, address });
          break;
        case ACTION_TYPES.INSERTING.CL:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.INSERT_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.CL,
          });
          break;
        case ACTION_TYPES.INSERTING.S35:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.INSERT_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.S35,
          });
          break;
        case ACTION_TYPES.INSERTING.S35R:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.INSERT_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.S35R,
          });
          break;
        case ACTION_TYPES.GENERATING.S35:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.GENERATE_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.S35,
          });
          break;
        case ACTION_TYPES.GENERATING.S35R:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.GENERATE_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.S35R,
          });
          break;
        case ACTION_TYPES.GENERATING.S36:
          push(WEB_ROUTES.INSPECTION_MANAGEMENT.GENERATE_NOTICE.url, {
            unitData,
            block,
            address,
            noticeType: NOTICE_TYPE.S36,
          });
          break;
        // case ACTION_TYPES.ENFORCE.S35:
        //   push(WEB_ROUTES.INSPECTION_MANAGEMENT.ENFORCE_S35.url, {
        //     unitData,
        //     block,
        //     address,
        //     noticeType: NOTICE_TYPE.S35,
        //   });
        //   break;
        default:
          break;
      }
      setSelectedUnits([]);
      setCurrentAction(ACTION_TYPES.NONE);
    }
  };

  const isSameUnit = (u1, u2) => u1?.floorNo === u2?.floorNo && u1?.unitNo === u2?.unitNo;

  const isSelected = (unit) => selectedUnits.findIndex((u) => isSameUnit(u, unit)) > -1;

  const onSelectUnit = (unit) => {
    if (isSelected(unit)) {
      setSelectedUnits(selectedUnits.filter((u) => !isSameUnit(u, unit)));
    } else {
      setSelectedUnits([...selectedUnits, unit]);
    }
  };
  const ActionDiv = () => (
    <div className="row">
      <div className="col-12">
        <div className="twoBtnsCont paddingTop30 paddingBottom30">
          <ul>
            {canGenerateCallLetter && (
              <li>
                <div className="paddingBottom10">Generate Call Letter for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.GENERATING.CL)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.GENERATING.CL ? 'Confirm' : 'Generate Call Letter'}
                  </button>
                </div>
              </li>
            )}
            {canViewCallLetter && (
              <li>
                <div className="paddingBottom10">{`Total number of CL served for this block : ${totalCLIssued}`}</div>
                <div>
                  <button type="button" onClick={() => onViewApproved(NOTICE_TYPE.CL)} className="btn btn-pri wf-200">
                    View Call Letter
                  </button>
                </div>
              </li>
            )}
            {canGenerateS35 && (
              <li>
                <div className="paddingBottom10">Generate S35 for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.GENERATING.S35)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.GENERATING.S35 ? 'Confirm' : 'Generate S35'}
                  </button>
                </div>
              </li>
            )}
            {canViewS35 && (
              <li>
                <div className="paddingBottom10">{`Total number of S35 served for this block : ${totalS35Issued}`}</div>
                <div>
                  <button type="button" onClick={() => onViewApproved(NOTICE_TYPE.S35)} className="btn btn-pri wf-200">
                    View S35
                  </button>
                </div>
              </li>
            )}
            {canGenerateS35R && (
              <li>
                <div className="paddingBottom10">Generate S35 Reminder for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.GENERATING.S35R)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.GENERATING.S35R ? 'Confirm' : 'Generate S35 Reminder'}
                  </button>
                </div>
              </li>
            )}
            {canViewS35R && (
              <li>
                <div className="paddingBottom10">{`Total number of S35 Reminder served for this block : ${totalS35RIssued}`}</div>
                <div>
                  <button type="button" onClick={() => onViewApproved(NOTICE_TYPE.S35R)} className="btn btn-pri wf-200">
                    View S35 Reminder
                  </button>
                </div>
              </li>
            )}
            {canGenerateS36 && (
              <li>
                <div className="paddingBottom10">Generate S36 for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.GENERATING.S36)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.GENERATING.S36 ? 'Confirm' : 'Generate S36'}
                  </button>
                </div>
              </li>
            )}
            {canViewS36 && (
              <li>
                <div className="paddingBottom10">{`Total number of S36 served for this block : ${totalS36Issued}`}</div>
                <div>
                  <button type="button" onClick={() => onViewApproved(NOTICE_TYPE.S36)} className="btn btn-pri wf-200">
                    View S36
                  </button>
                </div>
              </li>
            )}
            {canInsertCallLetter && (
              <li>
                <div className="paddingBottom10">Insert Call Letter for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.INSERTING.CL)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.INSERTING.CL ? 'Confirm' : 'Insert Call Letter'}
                  </button>
                </div>
              </li>
            )}
            {canInsertS35 && (
              <li>
                <div className="paddingBottom10">Insert S35 for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.INSERTING.S35)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.INSERTING.S35 ? 'Confirm' : 'Insert S35'}
                  </button>
                </div>
              </li>
            )}
            {canInsertS35R && (
              <li>
                <div className="paddingBottom10">Insert S35 Reminder for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.INSERTING.S35R)} className="btn btn-pri wf-200">
                    {currentAction === ACTION_TYPES.INSERTING.S35R ? 'Confirm' : 'Insert S35 Reminder'}
                  </button>
                </div>
              </li>
            )}
            {canEnforceS35 && (
              <li>
                <div className="paddingBottom10">Enforce S35 for inaccessible units</div>
                <div>
                  <button type="button" onClick={() => onCurrentActionChanged(ACTION_TYPES.ENFORCE.S35)} className="btn btn-pri wf-200">
                    {/* {currentAction === ACTION_TYPES.ENFORCE.S35 ? 'Confirm' : 'Enforce S35'} */}
                    Enforce S35
                  </button>
                </div>
              </li>
            )}
          </ul>
        </div>
      </div>
    </div>
  );

  const BlockChartTableHeader = () => (
    <thead>
      <tr className="tbl-headings">
        <th align="left" valign="middle">
          <div className="background">
            <span className="bottom">Level</span>
            <span className="top">Unit</span>
            <div className="line" />
          </div>
        </th>
        {columns.map((item) => (
          <th align="center" valign="middle" key={item}>
            {item}
          </th>
        ))}
      </tr>
    </thead>
  );

  const BlockChartTableBody = () => {
    const body = levels.map((level) => {
      const units = level?.units || [];
      const { floorNo, gravitrapPositive, gravitrapTotal } = level;
      return (
        <tr className="bg-white" key={floorNo}>
          <td align="middle">
            <div className="lvlLeft">
              <div>
                <u>Gravitrap</u>
              </div>
              <div className="label1">
                <span>{`Positive - ${gravitrapPositive}`}</span>
              </div>
              <div className="label1">
                <span>{`Total - ${gravitrapTotal}`}</span>
              </div>
            </div>
            <div className="lvlRight paddingTop25">{floorNo}</div>
          </td>
          {columns.map((unitNo) => {
            const key = `${unitNo} -- ${floorNo}`;
            const unit = units.find((temp) => temp.isUnitExisted && temp.unitNo === unitNo);
            if (!unit) {
              return (
                <td align="center" valign="middle" key={key} className={`p-0 ${currentAction === ACTION_TYPES.NONE ? '' : 'background-disable'}`}>
                  <div className="not-exist-line-1" />
                  <div className="not-exist-line-2" />
                </td>
              );
            }
            const { accessibility, inspectionDate, isBreedingFound, isTreated, isCallLetterIssued, isS35Issued, isS35RIssued, isS36Issued } = unit;
            let accessColor = '';
            const accessibilityText = accessibility || '';
            switch (accessibilityText.toLowerCase()) {
              case 'ac':
                accessColor = 'text-blue';
                break;
              case 'il':
                accessColor = 'text-green';
                break;
              case 'ir':
                accessColor = 'text-dark-red';
                break;
              case 'vc':
                accessColor = 'text-orange';
                break;
              default:
                break;
            }

            let subText = '';
            if (isS36Issued) {
              subText = 'S36';
            } else if (isS35RIssued) {
              subText = 'S35R';
            } else if (isS35Issued) {
              subText = 'S35';
            } else if (isCallLetterIssued) {
              subText = 'CL';
            } else if (isTreated) {
              subText = 'T';
            } else if (isBreedingFound) {
              subText = 'BR';
            }
            if (currentAction !== ACTION_TYPES.NONE) {
              const selected = { ...unit, floorNo };
              const b = unit[currentAction] || false; // TODO: for test
              return !b ? (
                <td
                  // align="center"
                  align="middle"
                  key={key}
                  className="background-disable">
                  <div className={`legendValue ${accessColor}`}>
                    <div className="sup text-red">{subText}</div>
                    {accessibilityText}
                  </div>
                  <div>{inspectionDate || ''}</div>
                </td>
              ) : (
                <td align="middle" key={key} className={`${isSelected(selected) ? 'background-highlight' : ''}`} onClick={() => onSelectUnit(selected)}>
                  <div className={`legendValue ${accessColor}`}>
                    <div className="sup text-red">{subText}</div>
                    {accessibilityText}
                  </div>
                  <div>{inspectionDate || ''}</div>
                </td>
              );
            }

            return (
              <td
                // align="center"
                align="middle"
                key={key}>
                <Link
                  to={{
                    pathname: `${pathname.slice(0, pathname.lastIndexOf('/'))}/block-detail`,
                    state: { unit: { ...block, floorNo, ...unit }, parent, fromLatest, block, address },
                  }}>
                  <div className={`legendValue ${accessColor}`}>
                    <div className="sup text-red">{subText}</div>
                    {accessibilityText}
                  </div>
                  <div>{inspectionDate || ''}</div>
                </Link>
              </td>
            );
          })}
        </tr>
      );
    });
    return <tbody>{body}</tbody>;
  };

  const BlockChartTable = () => (
    <div className="tables__main tabsContainer">
      <div className="tblCompo blkTbl">
        <table id="table_for_download">
          <BlockChartTableHeader />
          <BlockChartTableBody />
        </table>
      </div>
    </div>
  );

  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={parent} />
        <div className="contentWrapper">
          <Breadcrumb
            page={[
              WEB_ROUTES.INSPECTION_MANAGEMENT,
              fromLatest ? WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION : WEB_ROUTES.INSPECTION_MANAGEMENT.BLOCK_SUMMARY,
              fromLatest ? WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION_BLOCK_CHART : WEB_ROUTES.INSPECTION_MANAGEMENT.BLOCK_SUMMARY_BLOCK_CHART,
            ]}
          />
          <TitleDiv />
          <BodyDiv />
          <div id="forDownload">
            {columns.length > 0 && <BlockChartTable />}
            <div className="blkChartSummaryCont" id="table_for_download_footer">
              <BlockChartSummary />
              <BlockChartSubSummary />
            </div>
          </div>
          {fromLatest && <ActionDiv />}
          <Footer />
          <CustomModal isOpen={isShowConfirmModal} onCancel={toggleConfirmModal} type="info-modal" />
          <InPageLoading isLoading={isLoading} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ vectorInspectionReducers: { blockChart } }, ownProps) => ({
  ...ownProps,
  ...blockChart,
});

const mapDispatchToProps = { getBlockChartAction, getApprovedNoticeAction };
export default connect(mapStateToProps, mapDispatchToProps)(withRouter(BlockChart));
