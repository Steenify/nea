import React, { useEffect } from 'react';
import { withRouter, Redirect } from 'react-router-dom';

import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Footer from 'components/ui/footer';
import DataTable from 'components/common/data-table';
import { connect } from 'react-redux';
import InPageLoading from 'components/common/inPageLoading';
import Breadcrumb from 'components/ui/breadcrumb';
import { NOTICE_TYPE, WEB_ROUTES } from 'constants/index';
import { byteArrayToBase64, autoGenerateDownloadLink } from 'utils';
import { downloadNoticeAction } from '../../action';
import { getBlockSummaryDetailAction, DOWNLOAD_NOTICE } from './action';

const BlockSummaryDetail = ({
  getBlockSummaryDetailAction,
  downloadNoticeAction,

  location: { pathname, state },
  history: { goBack, push },
  ui: { isLoading },
  data: {
    blockHouseNo = 'BLK',
    roadName = '',
    postalCode = '',
    inspectionDateFrom = '',
    inspectionDateTo = '',
    floorNo = '',
    unitNo = '',
    inspectionDetails = [],
    canGenerateCallLetter = false,
    canGenerateS35 = false,
    canGenerateS35R = false,
    canGenerateS36 = false,
    canInsertCallLetter = false,
    canInsertS35 = false,
    canInsertS35R = false,
    canEnforceS35 = false,
  },
}) => {
  const unit = state?.unit;
  const parent = state?.parent || '';
  const fromLatest = state?.fromLatest || false;
  const address = state?.address || '';
  const block = state?.block || {};
  const mappedData = inspectionDetails.map((item) => ({
    ...item,
    additionalInfoString: item?.additionalInfos?.join('') || '',
  }));

  useEffect(() => {
    document.title = 'NEA | Block Detail';
    if (!unit) return;
    const postalCode = unit?.postalCode || '';
    const blockHouseNo = unit?.blockHouseNo || '';
    const floorNo = unit?.floorNo || '';
    const unitNo = unit?.unitNo || '';
    const inspectionDateFrom = unit?.inspectionDateFrom || '';
    const inspectionDateTo = unit?.inspectionDateTo || '';
    getBlockSummaryDetailAction({ postalCode, blockHouseNo, floorNo, unitNo, inspectionDateFrom, inspectionDateTo }, fromLatest);
  }, [getBlockSummaryDetailAction, unit, fromLatest]);

  if (!unit) {
    return <Redirect to={pathname.slice(0, pathname.lastIndexOf('/'))} />;
  }

  const columns = [
    {
      Header: 'Inspection/Notice Date',
      accessor: 'inspectionOrNoticeDate',
      minWidth: 200,
    },
    {
      Header: 'Inspection/Notice Time',
      accessor: 'inspectionOrNoticeTime',
      minWidth: 150,
    },
    {
      Header: 'Status',
      accessor: 'accessibilityStatus',
      minWidth: 150,
    },
    {
      Header: 'Additional Info',
      accessor: 'additionalInfoString',
      minWidth: 200,
    },
    {
      Header: '',
      accessor: 'name',
      minWidth: 200,
      Cell: ({ original }) => (
        <span
          className="text-blue cursor-pointer"
          onClick={(e) => {
            downloadNoticeAction([original.noticeFileId], DOWNLOAD_NOTICE, (res) => {
              const data = byteArrayToBase64(res?.noticeFile || []);
              const fileName = res?.noticeFileName || 'Notice_downloaded';
              const mimeType = res?.mimeType || 'application/pdf';
              autoGenerateDownloadLink(fileName, mimeType, data);
            });
          }}>
          {original.noticeFileId && `Download ${NOTICE_TYPE[original.noticeType]?.text || ''}`}
        </span>
      ),
    },
    {
      Header: 'Preventive Measure',
      accessor: 'preventiveMeasures',
      minWidth: 200,
    },
    {
      Header: 'Breeding',
      accessor: 'breedingDetected',
      minWidth: 100,
    },
    {
      Header: 'Officer Name',
      accessor: 'inspector',
      minWidth: 200,
    },
  ];

  const onInsertNotice = (noticeType) => {
    push(WEB_ROUTES.INSPECTION_MANAGEMENT.INSERT_NOTICE.url, {
      unitData: [unit],
      block,
      address,
      noticeType,
    });
  };

  const onGenerateNotice = (noticeType) => {
    push(WEB_ROUTES.INSPECTION_MANAGEMENT.GENERATE_NOTICE.url, {
      unitData: [unit],
      block,
      address,
      noticeType,
      fromDetail: true,
    });
  };

  const onEnforceS35 = () => {
    push(WEB_ROUTES.INSPECTION_MANAGEMENT.ENFORCE_S35.url, {
      unitData: [unit],
      block,
      address,
      noticeType: NOTICE_TYPE.S35,
      fromDetail: true,
    });
  };

  return (
    <>
      <Header />
      <div className="main-content workspace__main">
        <NavBar active={parent} />
        <div className="contentWrapper">
          <Breadcrumb
            page={[
              WEB_ROUTES.INSPECTION_MANAGEMENT,
              fromLatest ? WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION : WEB_ROUTES.INSPECTION_MANAGEMENT.BLOCK_SUMMARY,
              fromLatest ? WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION_BLOCK_DETAIL : WEB_ROUTES.INSPECTION_MANAGEMENT.BLOCK_SUMMARY_DETAIL,
            ]}
          />
          <div className="go-back">
            <span onClick={goBack}>{`Back to ${[blockHouseNo, roadName, postalCode, `#${floorNo} - ${unitNo}`].filter((i) => i).join(', ')}`}</span>
          </div>
          <div style={{ display: 'flex', flexDirection: 'row-reverse', padding: '0 30px', flexWrap: 'wrap' }}>
            {canGenerateCallLetter && (
              <button
                type="button"
                onClick={() => {
                  push(WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_CALL_LETTER.url, { units: [unit], block, address });
                }}
                className="btn-pri btn marginLeft10 marginBottom10">
                Generate Call Letter
              </button>
            )}
            {canGenerateS35 && (
              <button type="button" onClick={() => onGenerateNotice(NOTICE_TYPE.S35)} className="btn-pri btn marginLeft10 marginBottom10">
                Generate S35
              </button>
            )}
            {canGenerateS35R && (
              <button type="button" onClick={() => onGenerateNotice(NOTICE_TYPE.S35R)} className="btn-pri btn marginLeft10 marginBottom10">
                Generate S35 Reminder
              </button>
            )}
            {canGenerateS36 && (
              <button type="button" onClick={() => onGenerateNotice(NOTICE_TYPE.S36)} className="btn-pri btn marginLeft10 marginBottom10">
                Generate S36
              </button>
            )}
            {canInsertCallLetter && (
              <button type="button" onClick={() => onInsertNotice(NOTICE_TYPE.CL)} className="btn-pri btn marginLeft10 marginBottom10">
                Insert Call Letter
              </button>
            )}
            {canInsertS35 && (
              <button type="button" onClick={() => onInsertNotice(NOTICE_TYPE.S35)} className="btn-pri btn marginLeft10 marginBottom10">
                Insert S35
              </button>
            )}
            {canInsertS35R && (
              <button type="button" onClick={() => onInsertNotice(NOTICE_TYPE.S35R)} className="btn-pri btn marginLeft10 marginBottom10">
                Insert S35 Reminder
              </button>
            )}
            {canEnforceS35 && (
              <button type="button" onClick={onEnforceS35} className="btn-pri btn marginLeft10 marginBottom10">
                Enforce S35
              </button>
            )}
          </div>
          <div className="tabsContainer">
            <DataTable data={mappedData} columns={columns} title={fromLatest ? '' : `Inspection Date: ${inspectionDateFrom} to ${inspectionDateTo}`} />
          </div>
          <InPageLoading isLoading={isLoading} />
          <Footer />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ vectorInspectionReducers: { blockSummaryDetail } }, ownProps) => ({
  ...ownProps,
  ...blockSummaryDetail,
});

const mapDispatchToProps = { getBlockSummaryDetailAction, downloadNoticeAction };

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(BlockSummaryDetail));
