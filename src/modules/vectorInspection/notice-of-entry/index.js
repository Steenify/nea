import React, { useState, useEffect } from 'react';

import { withRouter, Redirect } from 'react-router-dom';
import { connect } from 'react-redux';
import Header from 'components/ui/header';
import NavBar from 'components/layout/navbar';
import Breadcrumb from 'components/ui/breadcrumb';
import Footer from 'components/ui/footer';
import InPageLoading from 'components/common/inPageLoading';
import DataTable from 'components/common/data-table';
import GoBackButton from 'components/ui/go-back-button';
import { autoGenerateDownloadLink, byteArrayToBase64 } from 'utils';
import { NOTICE_TYPE, WEB_ROUTES, tableColumnWidth } from 'constants/index';
import Checkbox from 'components/common/checkbox';

import Sort from 'components/common/sort';
import SearchBox from 'components/common/searchBox';
import DateRangePickerSelect from 'components/common/dateRangPickerSelect';
import { downloadNoticeAction } from '../action';
import { NOTICE_OF_ENTRY_DOWNLOAD, getApprovedNoticeAction, defaultFilterValue, filterAction } from './action';

const searchData = [
  {
    label: 'Unit',
    value: 'unit',
  },
  {
    label: 'Name of Owner/Occupier',
    value: 'ownerName',
  },
  {
    label: 'Approver',
    value: 'approver',
  },
];

const dateSelectData = [
  {
    label: 'Premises Inspection Date',
    value: 'inspectionDateFrom',
    useExactField: true,
  },
  {
    label: 'Approval Date',
    value: 'approvedDate',
    useExactField: true,
  },
];

const NoticeOfEntry = ({
  downloadNoticeAction,
  getApprovedNoticeAction,
  filterAction,
  ui: { isLoading = false },
  data: { list = [], filteredList = [] },
  location: { state },
  history: { goBack },
}) => {
  const noticeType = state?.noticeType || '';
  const postalCode = state?.postalCode || '';
  const blockHouseNo = state?.blockHouseNo || '';
  const parent = state?.parent || '';

  const [sortValue, setSortValue] = useState(defaultFilterValue.sortValue);
  const [searchType, setSearchTypeValue] = useState(defaultFilterValue.searchType);
  const [searchText, setSearchTextValue] = useState(defaultFilterValue.searchText);
  const [datePickerValue, setDatePickerValue] = useState(defaultFilterValue.datePickerValue);

  const [noticeIds, setNoticeIds] = useState([]);

  useEffect(() => {
    document.title = `NEA | ${WEB_ROUTES.INSPECTION_MANAGEMENT.NOTICE_OF_ENTRY.name}`;
    getApprovedNoticeAction({ noticeType: noticeType?.key, postalCode, blockHouseNo });
  }, [getApprovedNoticeAction, postalCode, blockHouseNo, noticeType]);

  useEffect(() => {
    filterAction({ sortValue, searchText, searchType, datePickerValue });
  }, [searchText, searchType, datePickerValue, filterAction, sortValue]);

  const isSelectedAll = () => noticeIds.length === list.length && list.length > 0;

  const isSelected = (id) => noticeIds.includes(id);

  const onSelectAll = () => {
    setNoticeIds(isSelectedAll() ? [] : list.map((item) => item.noticeId));
  };

  const onSelect = (id) => {
    setNoticeIds(isSelected(id) ? noticeIds.filter((item) => item !== id) : [...noticeIds, id]);
  };
  const onDownload = () => {
    // const noticeFileIds = list.map((item) => item.noticeId);
    downloadNoticeAction(noticeIds, NOTICE_OF_ENTRY_DOWNLOAD, (data) => {
      const { noticeFileName, noticeFile } = data;
      autoGenerateDownloadLink(noticeFileName, '', byteArrayToBase64(noticeFile));
    });
  };

  const columns = [
    {
      fixed: 'left',
      minWidth: tableColumnWidth.xs,
      Cell: (cellInfo) => <Checkbox checked={isSelected(cellInfo.original.noticeId)} onChange={() => onSelect(cellInfo.original.noticeId)} />,
      Header: () => <Checkbox checked={isSelectedAll()} onChange={() => onSelectAll()} />,
    },
    {
      Header: 'Unit',
      accessor: 'unit',
      minWidth: tableColumnWidth.sm,
    },
    {
      Header: 'Name of Owner/Occupier',
      accessor: 'ownerName',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'Premises Inspection Date',
      accessor: 'inspectionDateFrom',
      minWidth: tableColumnWidth.md,
    },
    {
      Header: 'Premises Inspection Time',
      accessor: 'timeDesc',
      minWidth: tableColumnWidth.lg,
      show: noticeType.key !== NOTICE_TYPE.S36.key,
      maxWidth: noticeType.key !== NOTICE_TYPE.S36.key ? undefined : 0,
    },
    {
      Header: 'Approver',
      accessor: 'approver',
      minWidth: tableColumnWidth.lg,
    },
    {
      Header: 'Approval Date',
      accessor: 'approvedDate',
      minWidth: tableColumnWidth.lg,
    },
  ];

  if (!noticeType) {
    return <Redirect to={WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION.url} />;
  }
  return (
    <>
      <Header />
      <div className="main-content">
        <NavBar active={parent} />
        <div className="contentWrapper">
          <Breadcrumb page={[WEB_ROUTES.INSPECTION_MANAGEMENT, WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION, WEB_ROUTES.INSPECTION_MANAGEMENT.NOTICE_OF_ENTRY]} />
          <GoBackButton onClick={goBack} title={`Back to ${noticeType?.descText || ''}: ${WEB_ROUTES.INSPECTION_MANAGEMENT.NOTICE_OF_ENTRY.name}`} />
          <div className="navbar navbar-expand filterMainWrapper">
            <div className="collapse navbar-collapse" id="navbarSupportedContent">
              <SearchBox name="barcode" placeholder="Search by keyword" onChangeText={setSearchTextValue} searchTypes={searchData} value={searchText} onChangeSearchType={setSearchTypeValue} />
              <DateRangePickerSelect className="navbar-nav filterWrapper ml-auto xs-paddingBottom15" onChange={setDatePickerValue} selectData={dateSelectData} data={datePickerValue} />
              <Sort className="navbar-nav sortWrapper" data={columns} value={sortValue} desc={sortValue.desc} onChange={setSortValue} />
            </div>
          </div>
          <div className="tabsContainer">
            <DataTable data={filteredList} columns={columns} title="" />
          </div>
          <div className="row">
            <div className="col-lg-12">
              <div className="btnWrapper">
                <button type="button" onClick={onDownload} className="btn btn-pri" disabled={noticeIds.length === 0}>
                  {`Download ${noticeType?.text}`}
                </button>
              </div>
            </div>
          </div>
          <Footer />
          <InPageLoading isLoading={isLoading} />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = ({ vectorInspectionReducers: { noticeOfEntry } }, ownProps) => ({
  ...ownProps,
  ...noticeOfEntry,
});

const mapDispatchToProps = { downloadNoticeAction, getApprovedNoticeAction, filterAction };
export default connect(mapStateToProps, mapDispatchToProps)(withRouter(NoticeOfEntry));
