import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import { WEB_ROUTES } from 'constants/index';
import { toggleMenu } from 'store/actions';

import NavbarItem from './navbarItem';

import './style.scss';

const NavBarMenu = [
  WEB_ROUTES.DASHBOARD,
  WEB_ROUTES.CLAIM_TASK,
  WEB_ROUTES.MY_WORKSPACE,
  WEB_ROUTES.NON_FUNCTIONAL.COMMON_UPLOAD,
  WEB_ROUTES.NON_FUNCTIONAL.UPLOADED_FILES,
  {
    ...WEB_ROUTES.INSPECTION_MANAGEMENT,
    subMenus: [
      WEB_ROUTES.INSPECTION_MANAGEMENT.PRINT_SCANNABLE_CODE_LABELS,
      WEB_ROUTES.INSPECTION_MANAGEMENT.DEPOSIT_SAMPLE,
      WEB_ROUTES.INSPECTION_MANAGEMENT.SEND_SAMPLE,
      WEB_ROUTES.INSPECTION_MANAGEMENT.URGENT_SAMPLES,
      WEB_ROUTES.INSPECTION_MANAGEMENT.TRACK_SAMPLE_STATUS,
      WEB_ROUTES.INSPECTION_MANAGEMENT.EDIT_SOF,
      WEB_ROUTES.INSPECTION_MANAGEMENT.BLOCK_SUMMARY,
      WEB_ROUTES.INSPECTION_MANAGEMENT.LATEST_INSPECTION,
      WEB_ROUTES.RODENT_AUDIT.MONITORING_OF_INSPECTION_RESULTS,
      WEB_ROUTES.INSPECTION_MANAGEMENT.IDENTIFIED_SAMPLES,
      WEB_ROUTES.INSPECTION_MANAGEMENT.FORM3_VOID_LISTING,
      WEB_ROUTES.INSPECTION_MANAGEMENT.UPLOAD_PCO_SCHEDULE,
      WEB_ROUTES.INSPECTION_MANAGEMENT.TOWN_COUNCIL_FINE_REGIME,
      WEB_ROUTES.INSPECTION_MANAGEMENT.QUERY_NON_RODENT_INSPECTION,
      WEB_ROUTES.INSPECTION_MANAGEMENT.QUERY_RODENT_INSPECTION,
      WEB_ROUTES.INSPECTION_MANAGEMENT.QUERY_FORM3_STATUS,
      WEB_ROUTES.INSPECTION_MANAGEMENT.QUERY_TOWN_COUNCIL_FINE_REGIME,
      WEB_ROUTES.INSPECTION_MANAGEMENT.SEND_TC_FORM3_TO_EEMS2,
    ],
  },
  {
    ...WEB_ROUTES.OPS_AREA,
    subMenus: [WEB_ROUTES.OPS_AREA.LANDING_PAGE, WEB_ROUTES.OPS_AREA.CREATE_OPERATION],
  },
  {
    ...WEB_ROUTES.EPI_INVESTIGATION,
    subMenus: [WEB_ROUTES.EPI_INVESTIGATION.REASSIGN_TASK, WEB_ROUTES.REPORT.BULK_UPDATE_FINDINGS, WEB_ROUTES.EPI_INVESTIGATION.UPLOAD_ARCGIS_FILE],
  },
  {
    ...WEB_ROUTES.SAMPLE_IDENTIFICATION,
    subMenus: [
      WEB_ROUTES.SAMPLE_IDENTIFICATION.RECEIVE_SAMPLE,
      WEB_ROUTES.SAMPLE_IDENTIFICATION.QUERY_SAMPLE_STATUS,
      WEB_ROUTES.SAMPLE_IDENTIFICATION.QUERY_INSPECTION_FORM_STATUS,
      WEB_ROUTES.SAMPLE_IDENTIFICATION.QUERY_SAMPLE_KPI_MONTHLY,
    ],
  },
  {
    ...WEB_ROUTES.FOGGING_AUDIT,
    subMenus: [
      WEB_ROUTES.FOGGING_AUDIT.FOGGING_SCHEDULE,
      WEB_ROUTES.FOGGING_AUDIT.AD_HOC,
      WEB_ROUTES.FOGGING_AUDIT.ON_SITE_AUDIT_RESULTS,
      WEB_ROUTES.FOGGING_AUDIT.QUERY_FOGGING,
      WEB_ROUTES.FOGGING_AUDIT.UPLOAD_FILES_SCHEDULE,
    ],
  },
  {
    ...WEB_ROUTES.RODENT_AUDIT,
    subMenus: [
      // WEB_ROUTES.RODENT_AUDIT.UPLOAD_FILES,
      WEB_ROUTES.RODENT_AUDIT.MANPOWER_LIST,
      WEB_ROUTES.RODENT_AUDIT.OPERATIONAL_SCHEDULE,
      WEB_ROUTES.RODENT_AUDIT.DAILY_DEPLOYMENT,
      WEB_ROUTES.RODENT_AUDIT.DAILY_REPORT,
      WEB_ROUTES.RODENT_AUDIT.FEEDBACK_INVESTIGATION_REPORT,
      WEB_ROUTES.RODENT_AUDIT.QUERY_LATE_SUBMISSION,
      WEB_ROUTES.RODENT_AUDIT.QUERY_AUDIT_TASK,
    ],
  },
  {
    ...WEB_ROUTES.EHI_GRAVITRAP_AUDIT,
    subMenus: [
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.USER_LOGGED_TASK,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPDATE_ADHOC_LAPSE,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPLOADED_DOCUMENT_FOR_LD,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPLOADED_FILES,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_TASK_AUDITED_EHI,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_LAPSE_OBSERVED_EHI,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_OUTSTANDING_AUDIT_TASK,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_TRAPS_AUDITED_LAPSES_OBSERVED,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_BREAKDOWN_LAPSES_OBSERVED,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_OFFICER_WITH_LOW_LAPSE,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.QUERY_LD_AMOUNT_BY_MONTH,
      WEB_ROUTES.EHI_GRAVITRAP_AUDIT.UPLOAD_FINDINGS,
    ],
  },
  {
    ...WEB_ROUTES.ADMINISTRATION,
    subMenus: [
      WEB_ROUTES.ADMINISTRATION.MASTER_CODE,
      WEB_ROUTES.ADMINISTRATION.HOLIDAY,
      WEB_ROUTES.ADMINISTRATION.EWEEK,
      WEB_ROUTES.ADMINISTRATION.DIVISION_TC_MAPPING,
      WEB_ROUTES.ADMINISTRATION.CONFIGURATION_MAINTENANCE,
      WEB_ROUTES.ADMINISTRATION.SPECIES_CODE,
      WEB_ROUTES.ADMINISTRATION.SPECIMEN,
      WEB_ROUTES.ADMINISTRATION.NOTIFICATION_TEMPLATE,
      WEB_ROUTES.ADMINISTRATION.BROADCAST_MESSAGES,
      WEB_ROUTES.ADMINISTRATION.PRODUCT,
      WEB_ROUTES.ADMINISTRATION.USER_APPROVER_MAPPING,
      WEB_ROUTES.ADMINISTRATION.LAPSE_CONFIGURATION,
      WEB_ROUTES.RODENT_AUDIT.OPTIONAL_TASK_LD_CONFIGURATION_LIST,
    ],
  },
  {
    ...WEB_ROUTES.AUTHENTICATION_AUTHORISATION,
    subMenus: [WEB_ROUTES.AUTHENTICATION_AUTHORISATION.FUNCTION_ROLE_MAPPING],
  },
  {
    ...WEB_ROUTES.BATCH_JOB_MANAGEMENT,
    subMenus: [WEB_ROUTES.BATCH_JOB_MANAGEMENT.BATCH_JOB_STATUS],
  },
  {
    ...WEB_ROUTES.AUDIT_TRAILS_REPORT,
    subMenus: [WEB_ROUTES.AUDIT_TRAILS_REPORT.USER_AUDIT_LOG, WEB_ROUTES.AUDIT_TRAILS_REPORT.SYSTEM_AUDIT_LOG],
  },
  {
    ...WEB_ROUTES.DASHBOARD_CONFIGURATION,
    subMenus: [WEB_ROUTES.DASHBOARD_CONFIGURATION.WIDGET_BY_ROLE],
  },
  {
    ...WEB_ROUTES.REPORT,
    subMenus: [
      WEB_ROUTES.REPORT.ZONE_TRACKING,
      WEB_ROUTES.REPORT.SURVEY_BY_ROAD,
      WEB_ROUTES.REPORT.QUERY_BREEDING,
      WEB_ROUTES.REPORT.QUERY_VOID_INSPECTION,
      WEB_ROUTES.REPORT.DAILY_HABITAT,
      WEB_ROUTES.REPORT.EPI_FINDING_REPORT,
      WEB_ROUTES.REPORT.CLUSTER_SUMMARY_REPORT,
      WEB_ROUTES.REPORT.CLUSTER_UNDER_SURVEILANCE_SUMMARY_REPORT,
      WEB_ROUTES.REPORT.DENGUE_WEBSITE_FILE_FOR_ACTIVE_CASES,
      WEB_ROUTES.REPORT.DENGUE_WEBSITE_FILE_UNDER_SURVEILANCE,
      WEB_ROUTES.REPORT.COMPARE_CONTRACTOR_EHI,
      WEB_ROUTES.REPORT.SUMMARY_OF_MOSQUITO_IN_CLUSTER,
      WEB_ROUTES.REPORT.MOSQUITO_ID_REPORT,
      WEB_ROUTES.REPORT.AUDIT_TASK_DETAILS,
      WEB_ROUTES.REPORT.EHI_ADHOC_LAPSES,
      WEB_ROUTES.REPORT.EHI_AUDIT_SHOW_CAUSE_REPORT,
      WEB_ROUTES.REPORT.SITE_AUDIT_SHOW_CAUSE_REPORT,
      WEB_ROUTES.REPORT.PAPER_AUDIT_SHOW_CAUSE_REPORT,
      WEB_ROUTES.REPORT.SUMMARY_OF_TRAPS_AUDITED,
      WEB_ROUTES.REPORT.DISCREPANCY_NUMBER_OF_TRAPS,
      WEB_ROUTES.REPORT.CERTIFICATION_REPORT,
      WEB_ROUTES.REPORT.INSPECTION_AND_BREEDING,
      WEB_ROUTES.REPORT.ACCESSIBILITY_RATE,
      WEB_ROUTES.REPORT.CONSTRUCTION_SITE_INSPECTION,
      WEB_ROUTES.REPORT.CONSTRUCTION_SITE_MONITORING,
      WEB_ROUTES.REPORT.ENFORCEMENT_MONITORING,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_INSPECTIONS_EWEEK,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_INSPECTIONS_EMONTH,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EWEEK,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_EMONTH,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_HABITATS_EWEEK,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_PREMISE_WITH_BREEDING_HABITATS_EMONTH,
      WEB_ROUTES.REPORT.AEDES_BREEDING_MASTER_LIST_SUMMARY,
      WEB_ROUTES.REPORT.FRIENDSHIP_BOARD,
      WEB_ROUTES.REPORT.OPERATION_REPORT,
      WEB_ROUTES.REPORT.DAILY_SUMMARY_OF_SAMPLES,
      WEB_ROUTES.REPORT.CUSTOM_REPORT_FOR_LOCATIONS_SPECIES_HABITATS_DATES,
      WEB_ROUTES.REPORT.SPECIMEN_SAMPLES_RECEIVED_BY_EHI,
      WEB_ROUTES.REPORT.DAILY_SPECIMEN_RECEIVED_FROM_RO,
      WEB_ROUTES.REPORT.SAMPLES_IDENTIFIED_BY_MONTH,
      WEB_ROUTES.REPORT.SAMPLES_TREATMENT,
      WEB_ROUTES.REPORT.FOGGING_NOTIFICATION_AND_AUDIT,
      WEB_ROUTES.REPORT.RODENT_AUDIT_SHOW_CAUSE_REPORT,
      WEB_ROUTES.REPORT.ADHOC_REPORT_SELECT_HEADER,
    ],
  },
  WEB_ROUTES.NON_FUNCTIONAL.PERFORMANCE_METRICS,
];

const NavBar = (props) => {
  const { className, showMenu, active, userRole, toggleMenu, functionNameList, workspaceList, commonPoolList } = props;
  const availableFunctions = [...workspaceList, ...functionNameList, ...commonPoolList];
  const renderMenu = () => (
    <>
      {NavBarMenu.filter((menu) => {
        if (menu.roles) return menu.roles.length === 0 || menu.roles.map((role) => role.name).includes(userRole.name);

        if (menu.functionNames) return menu.functionNames.length === 0 || availableFunctions.filter((item) => menu.functionNames.includes(item)).length > 0;
        return false;
      }).map((menu, index) => (
        <NavbarItem
          key={`navbar_menu_${index + 1}`}
          item={menu}
          active={active}
          userRole={userRole}
          functionNameList={availableFunctions}
          onClick={() => {
            if (showMenu) toggleMenu();
          }}
        />
      ))}
    </>
  );

  return (
    <nav className={`nav__main ${className || ''}`}>
      <div className={`overlay ${showMenu ? '' : 'hidden'}`} />
      <div className={`menuWrapper ${showMenu ? '' : 'hidden'}`}>
        <div className="container">
          <div className="iMenu">
            <div className="iNavTitle">Vector Control System 2</div>
            <ul>{renderMenu()}</ul>
          </div>
        </div>
      </div>
      <div className="leftNavCont bg-dark-blue cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left" id="cbp-spmenu-s1">
        <div>
          <div className="leftNavTitle">Vector Control System 2</div>
          <ul className="leftNav"> {renderMenu()} </ul>
        </div>
      </div>
    </nav>
  );
};

NavBar.defaultProps = {
  active: '',
  userRole: 'Admin',
};

const mapStateToProps = ({ global }, ownProps) => ({
  ...ownProps,
  showMenu: global.ui.showMenu,
  userRole: global.ui.userRole,
  functionNameList: global.data.functionNameList,
  workspaceList: global.data.workspaceList,
  commonPoolList: global.data.commonPoolList,
});

const mapDispatchToProps = {
  toggleMenu,
};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(NavBar));
