import React, { Component } from 'react';
import { UncontrolledTooltip } from 'reactstrap';

import { downloadFile } from 'services/file-operation';
import { common } from 'assets';
import { byteArrayToBase64, isImageMimeType, autoGenerateDownloadLink } from 'utils';

class BinaryFile extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isLoaded: false,
      binary: '',
      fileName: '',
      fileType: '',
      isImage: true,
    };
  }

  async componentDidMount() {
    this.isComponentUnmounting = false;
    const { fileId, onImageLoaded } = this.props;
    let fileData = {
      src: '',
      fileName: '',
    };
    try {
      this.downloadRequest = downloadFile({ fileId });
      const { status, data } = await this.downloadRequest.request;
      if (status === 200 && data.status === 'Pass') {
        const base64 = byteArrayToBase64(data.fileData);
        const isImage = isImageMimeType(data.fileType);
        const src = isImage ? `data:${data.fileType};base64,${base64}` : common.document__icon;
        // const src = `data:${data.fileType};base64,${base64}`;
        fileData = {
          fileName: data.fileName,
          isLoaded: true,
          binary: base64,
          fileType: data.fileType,
          src,
          isImage,
        };
      } else {
        throw String(`Unable to load this file. (ID: ${fileId})`);
      }
    } catch (error) {
      // if (typeof error === 'string') fileName = error;
      // else fileName = error.message;
      fileData = {
        isLoaded: true,
        fileName: `Unable to load this file. (ID: ${fileId})`,
        src: common.img__upload,
        isImage: true,
      };
    }
    if (!this.isComponentUnmounting) {
      this.setState(fileData);
      if (onImageLoaded) onImageLoaded(fileData);
    }
  }

  componentWillUnmount() {
    this.isComponentUnmounting = true;
    if (this.downloadRequest) {
      // this.downloadRequest.cancel();
      this.downloadRequest = null;
    }
  }

  render() {
    const { isLoaded, binary, fileName, fileType, isImage } = this.state;
    const { className, onClick, fileId } = this.props;
    const src = isLoaded ? `data:${fileType};base64,${binary}` : common.img__upload;
    return (
      <div className={className} style={{ position: 'relative' }}>
        {isImage ? (
          <img id={`binary_file_${fileId}`} src={src} alt={`${fileName}/${fileType}`} onClick={onClick} />
        ) : (
          <img id={`binary_file_${fileId}`} src={common.document__icon} alt={`${fileName}/${fileType}`} onClick={() => autoGenerateDownloadLink(fileName, fileType, binary)} />
          // <iframe src={src} title={`${fileName}/${fileType}`} height="100%" width="100%" />
        )}
        <UncontrolledTooltip placement="bottom" target={`binary_file_${fileId}`}>
          {fileName}
        </UncontrolledTooltip>
        {!isLoaded && (
          <div className="loading-ripple">
            <div className="lds-ripple">
              <div />
              <div />
            </div>
          </div>
        )}
      </div>
    );
  }
}

export default BinaryFile;
