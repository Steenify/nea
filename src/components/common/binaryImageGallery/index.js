import React, { useState, useReducer } from 'react';
import Carousel, { Modal, ModalGateway } from 'react-images';
import BinaryFile from 'components/common/binaryImage';

import { autoGenerateDownloadLink } from 'utils';

import _ from 'lodash';

const ClickableImageView = (props) => {
  const {
    currentView: {
      src,
      fileName,
      fileType,
      binary,
      // isImage,
    },
  } = props;
  return (
    <div className="react-images__view react-images__view--isModal" style={{ lineHeight: 0, position: 'relative', boxSizing: 'border-box', textAlign: 'center' }}>
      <img className="react-images__view-image--isModal" src={src} alt={fileName} style={{ userSelect: 'none', boxSizing: 'border-box', height: 'auto', maxHeight: '100vh', maxWidth: '100%' }} />
      <p className="text-white cursor-pointer m-2 font-weight-bold pt-3" onClick={() => autoGenerateDownloadLink(fileName, fileType, binary)}>
        Click to download
      </p>
    </div>
  );
};

const BinaryFileGallery = (props) => {
  const { fileIdList, className } = props;

  const [carouselState, setCarouselState] = useState({ open: false, index: 0 });

  const [imageSrcs, dispatch] = useReducer(
    (imageSrcs, { type, payload }) => {
      switch (type) {
        case 'update': {
          const temp = _.cloneDeep(imageSrcs);
          temp[payload.index] = payload.value;
          return temp;
        }
        default:
          return imageSrcs;
      }
    },
    (fileIdList || []).map(() => ({ src: '', isLoaded: false, fileName: 'Loading...' })),
  );

  const onImageLoaded = (file, index) => {
    dispatch({
      type: 'update',
      payload: {
        index,
        value: {
          ...file,
          isLoaded: true,
          caption: file.fileName,
        },
      },
    });
  };

  return (
    <div className={className}>
      {fileIdList &&
        fileIdList.map((fileId, index) => (
          <BinaryFile
            key={`review_gallery_image_${index + 1}`}
            className="img-thumbnail"
            fileId={fileId}
            onImageLoaded={(src) => onImageLoaded(src, index)}
            onClick={() => imageSrcs[index].isLoaded && setCarouselState({ open: true, index })}
          />
        ))}
      <ModalGateway>
        {carouselState.open ? (
          <Modal
            onClose={() => setCarouselState({ open: false, index: 0 })}
            styles={{
              blanket: (base) => ({ ...base, zIndex: 1100 }),
              positioner: (base) => ({ ...base, zIndex: 1110 }),
              dialog: (base) => ({ ...base, zIndex: 1120 }),
            }}>
            <Carousel views={imageSrcs} currentIndex={carouselState.index} components={{ View: ClickableImageView }} />
          </Modal>
        ) : null}
      </ModalGateway>
    </div>
  );
};

export default BinaryFileGallery;
